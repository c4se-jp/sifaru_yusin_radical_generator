!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=56)}([function(t,e,n){"use strict";n.d(e,"g",(function(){return o})),n.d(e,"d",(function(){return s})),n.d(e,"p",(function(){return u})),n.d(e,"c",(function(){return c})),n.d(e,"e",(function(){return h})),n.d(e,"n",(function(){return _})),n.d(e,"l",(function(){return y})),n.d(e,"m",(function(){return x})),n.d(e,"h",(function(){return E})),n.d(e,"q",(function(){return C})),n.d(e,"r",(function(){return A})),n.d(e,"s",(function(){return R})),n.d(e,"i",(function(){return V})),n.d(e,"f",(function(){return q})),n.d(e,"a",(function(){return Y})),n.d(e,"b",(function(){return Q})),n.d(e,"o",(function(){return tt})),n.d(e,"k",(function(){return et})),n.d(e,"j",(function(){return nt}));var r="org.transcrypt.__runtime__",i={};function o(t,e,n){var r=t;if(""!=e){for(var i=e.split("."),o=i.length,s=0;s<i.length;s++){if(!r.hasOwnProperty(i[s])){o=s;break}r=r[i[s]]}for(s=o;s<i.length;s++)r[i[s]]={},r=r[i[s]]}for(let t of Object.getOwnPropertyNames(n))Object.defineProperty(r,t,{get:()=>n[t],enumerable:!0,configurable:!0})}i.interpreter_name="python",i.transpiler_name="transcrypt",i.executor_name=i.transpiler_name,i.transpiler_version="3.7.16";function s(t,e,n){return t&&(t.hasOwnProperty("__class__")||"string"==typeof t||t instanceof String)?(n&&Object.defineProperty(t,n,{value:function(){var n=[].slice.apply(arguments);return e.apply(null,[t].concat(n))},writable:!0,enumerable:!0,configurable:!0}),function(){var n=[].slice.apply(arguments);return e.apply(null,[t].concat(n))}):e}var a={__name__:"type",__bases__:[],__new__:function(t,e,n,r){for(var i=function(){var t=[].slice.apply(arguments);return i.__new__(t)},o=n.length-1;o>=0;o--){var s=n[o];for(var a in s){var u=Object.getOwnPropertyDescriptor(s,a);Object.defineProperty(i,a,u)}for(let t of Object.getOwnPropertySymbols(s)){let e=Object.getOwnPropertyDescriptor(s,t);Object.defineProperty(i,t,e)}}for(var a in i.__metaclass__=t,i.__name__=e.startsWith("py_")?e.slice(3):e,i.__bases__=n,r){u=Object.getOwnPropertyDescriptor(r,a);Object.defineProperty(i,a,u)}for(let t of Object.getOwnPropertySymbols(r)){let e=Object.getOwnPropertyDescriptor(r,t);Object.defineProperty(i,t,e)}return i}};a.__metaclass__=a;var u={__init__:function(t){},__metaclass__:a,__name__:"object",__bases__:[],__new__:function(t){var e=Object.create(this,{__class__:{value:this,enumerable:!0}});return("__getattr__"in this||"__setattr__"in this)&&(e=new Proxy(e,{get:function(t,e){let n=t[e];return null==n?t.__getattr__(e):n},set:function(t,e,n){try{t.__setattr__(e,n)}catch(r){t[e]=n}return!0}})),this.__init__.apply(null,[e].concat(t)),e}};function c(t,e,n,r){return void 0===r&&(r=e[0].__metaclass__),r.__new__(r,t,e,n)}i.executor_name=i.transpiler_name;function l(t){return t.__kwargtrans__=null,t.constructor=Object,t}function p(t,e,n){t.hasOwnProperty(e)||Object.defineProperty(t,e,n)}function h(t,e){return null!=e&&(e.__contains__ instanceof Function?e.__contains__(t):e.indexOf?e.indexOf(t)>-1:e.hasOwnProperty(t))}function f(t){return t.startswith("__")&&t.endswith("__")||"constructor"==t||t.startswith("py_")}function _(t){if(null==t)return 0;if(t.__len__ instanceof Function)return t.__len__();if(void 0!==t.length)return t.length;var e=0;for(var n in t)f(n)||e++;return e}function d(t){if("inf"==t)return 1/0;if("-inf"==t)return-1/0;if("nan"==t)return NaN;if(isNaN(parseFloat(t))){if(!1===t)return 0;if(!0===t)return 1;throw $("could not convert string to float: '"+k(t)+"'",new Error)}return+t}function y(t){return 0|d(t)}function g(t){return!(null==(e=t)||!(["boolean","number"].indexOf(typeof e)>=0?e:e.__bool__ instanceof Function?e.__bool__()&&e:e.__len__ instanceof Function?0!==e.__len__()&&e:(e instanceof Function||0!==_(e))&&e));var e}function v(t){var e=typeof t;if("object"!=e)return"boolean"==e?g:"string"==e?k:"number"==e?t%1==0?y:d:null;try{return"__class__"in t?t.__class__:u}catch(t){return e}}function m(t,e){if(e instanceof Array){for(let n of e)if(m(t,n))return!0;return!1}try{var n=t;if(n==e)return!0;for(var r=[].slice.call(n.__bases__);r.length;){if((n=r.shift())==e)return!0;n.__bases__.length&&(r=[].slice.call(n.__bases__).concat(r))}return!1}catch(n){return t==e||e==u}}function x(t,e){try{return m("__class__"in t?t.__class__:v(t),e)}catch(n){return m(v(t),e)}}function T(t){try{return t.__repr__()}catch(o){try{return t.__str__()}catch(o){try{if(null==t)return"None";if(t.constructor==Object){var e="{",n=!1;for(var r in t)if(!f(r)){if(r.isnumeric())var i=r;else i="'"+r+"'";n?e+=", ":n=!0,e+=i+": "+T(t[r])}return e+="}"}return"boolean"==typeof t?t.toString().capitalize():t.toString()}catch(e){return"<object of type: "+typeof t+">"}}}}d.__name__="float",d.__bases__=[u],y.__name__="int",y.__bases__=[u],g.__name__="bool",g.__bases__=[y];var E=Math.abs;function S(t){this.iterable=t,this.index=0}function O(t){this.iterable=t,this.index=0}function C(t,e,n){if(null==e&&(e=t,t=0),null==n&&(n=1),n>0&&t>=e||n<0&&t<=e)return[];for(var r=[],i=t;n>0?i<e:i>e;i+=n)r.push(i);return r}function A(t){let e=0;for(let n of t)e+=n;return e}function b(t){return t?Array.from(t):[]}function R(t){let e=t?[].slice.apply(t):[];return e.__class__=R,e}function P(t){let e=[];if(t)for(let n=0;n<t.length;n++)e.add(t[n]);return e.__class__=P,e}S.prototype.__next__=function(){if(this.index<this.iterable.length)return this.iterable[this.index++];throw G(new Error)},O.prototype.next=function(){return this.index<this.iterable.py_keys.length?{value:this.index++,done:!1}:{value:void 0,done:!0}},Array.prototype.__class__=b,b.__name__="list",b.__bases__=[u],Array.prototype.__iter__=function(){return new S(this)},Array.prototype.__getslice__=function(t,e,n){if(t<0&&(t=this.length+t),null==e?e=this.length:e<0?e=this.length+e:e>this.length&&(e=this.length),1==n)return Array.prototype.slice.call(this,t,e);let r=b([]);for(let i=t;i<e;i+=n)r.push(this[i]);return r},Array.prototype.__setslice__=function(t,e,n,r){if(t<0&&(t=this.length+t),null==e?e=this.length:e<0&&(e=this.length+e),null==n)Array.prototype.splice.apply(this,[t,e-t].concat(r));else{let i=0;for(let o=t;o<e;o+=n)this[o]=r[i++]}},Array.prototype.__repr__=function(){if(this.__class__==P&&!this.length)return"set()";let t=this.__class__&&this.__class__!=b?this.__class__==R?"(":"{":"[";for(let e=0;e<this.length;e++)e&&(t+=", "),t+=T(this[e]);return this.__class__==R&&1==this.length&&(t+=","),t+=this.__class__&&this.__class__!=b?this.__class__==R?")":"}":"]",t},Array.prototype.__str__=Array.prototype.__repr__,Array.prototype.append=function(t){this.push(t)},Array.prototype.py_clear=function(){this.length=0},Array.prototype.extend=function(t){this.push.apply(this,t)},Array.prototype.insert=function(t,e){this.splice(t,0,e)},Array.prototype.remove=function(t){let e=this.indexOf(t);if(-1==e)throw $("list.remove(x): x not in list",new Error);this.splice(e,1)},Array.prototype.index=function(t){return this.indexOf(t)},Array.prototype.py_pop=function(t){return null==t?this.pop():this.splice(t,1)[0]},Array.prototype.py_sort=function(){Z.apply(null,[this].concat([].slice.apply(arguments)))},Array.prototype.__add__=function(t){return b(this.concat(t))},Array.prototype.__mul__=function(t){let e=this;for(let n=1;n<t;n++)e=e.concat(this);return e},Array.prototype.__rmul__=Array.prototype.__mul__,R.__name__="tuple",R.__bases__=[u],P.__name__="set",P.__bases__=[u],Array.prototype.__bindexOf__=function(t){t+="";let e=0,n=this.length-1;for(;e<=n;){let r=(e+n)/2|0,i=this[r]+"";if(i<t)e=r+1;else{if(!(i>t))return r;n=r-1}}return-1},Array.prototype.add=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.discard=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.isdisjoint=function(t){this.sort();for(let e=0;e<t.length;e++)if(-1!=this.__bindexOf__(t[e]))return!1;return!0},Array.prototype.issuperset=function(t){this.sort();for(let e=0;e<t.length;e++)if(-1==this.__bindexOf__(t[e]))return!1;return!0},Array.prototype.issubset=function(t){return P(t.slice()).issuperset(this)},Array.prototype.union=function(t){let e=P(this.slice().sort());for(let n=0;n<t.length;n++)-1==e.__bindexOf__(t[n])&&e.push(t[n]);return e},Array.prototype.intersection=function(t){this.sort();let e=P();for(let n=0;n<t.length;n++)-1!=this.__bindexOf__(t[n])&&e.push(t[n]);return e},Array.prototype.difference=function(t){let e=P(t.slice().sort()),n=P();for(let t=0;t<this.length;t++)-1==e.__bindexOf__(this[t])&&n.push(this[t]);return n},Array.prototype.symmetric_difference=function(t){return this.union(t).difference(this.intersection(t))},Array.prototype.py_update=function(){let t=[].concat.apply(this.slice(),arguments).sort();this.py_clear();for(let e=0;e<t.length;e++)t[e]!=t[e-1]&&this.push(t[e])},Array.prototype.__eq__=function(t){if(this.length!=t.length)return!1;this.__class__==P&&(this.sort(),t.sort());for(let e=0;e<this.length;e++)if(this[e]!=t[e])return!1;return!0},Array.prototype.__ne__=function(t){return!this.__eq__(t)},Array.prototype.__le__=function(t){if(this.__class__==P)return this.issubset(t);for(let e=0;e<this.length;e++){if(this[e]>t[e])return!1;if(this[e]<t[e])return!0}return!0},Array.prototype.__ge__=function(t){if(this.__class__==P)return this.issuperset(t);for(let e=0;e<this.length;e++){if(this[e]<t[e])return!1;if(this[e]>t[e])return!0}return!0},Array.prototype.__lt__=function(t){return this.__class__==P?this.issubset(t)&&!this.issuperset(t):!this.__ge__(t)},Array.prototype.__gt__=function(t){return this.__class__==P?this.issuperset(t)&&!this.issubset(t):!this.__le__(t)};function k(t){if("number"==typeof t)return t.toString();try{return t.__str__()}catch(e){try{return T(t)}catch(e){return String(t)}}}function N(t){return this.hasOwnProperty(t)}function L(){var t=[];for(var e in this)f(e)||t.push(e);return t}function I(){var t=[];for(var e in this)f(e)||t.push([e,this[e]]);return t}function D(t){delete this[t]}function w(){for(var t in this)delete this[t]}function M(t,e){var n=this[t];return null==n&&(n=this["py_"+t]),null==n?null==e?null:e:n}function j(t,e){var n=this[t];if(null!=n)return n;var r=null==e?null:e;return this[t]=r,r}function F(t,e){var n=this[t];if(null!=n)return delete this[t],n;if(void 0===e)throw X(t,new Error);return e}function U(){var t=Object.keys(this)[0];if(null==t)throw X("popitem(): dictionary is empty",new Error);var e=R([t,this[t]]);return delete this[t],e}function W(t){for(var e in t)this[e]=t[e]}function B(){var t=[];for(var e in this)f(e)||t.push(this[e]);return t}function K(t){return this[t]}function H(t,e){this[t]=e}function V(t){var e={};if(!t||t instanceof Array){if(t)for(var n=0;n<t.length;n++){var r=t[n];if(!(r instanceof Array)||2!=r.length)throw $("dict update sequence element #"+n+" has length "+r.length+"; 2 is required",new Error);var i=r[0],o=r[1];!(t instanceof Array)&&t instanceof Object&&(x(t,V)||(o=V(o))),e[i]=o}}else if(x(t,V)){var s=t.py_keys();for(n=0;n<s.length;n++){e[i=s[n]]=t[i]}}else{if(!(t instanceof Object))throw $("Invalid type of object for dict creation",new Error);e=t}return p(e,"__class__",{value:V,enumerable:!1,writable:!0}),p(e,"__contains__",{value:N,enumerable:!1}),p(e,"py_keys",{value:L,enumerable:!1}),p(e,"__iter__",{value:function(){new S(this.py_keys())},enumerable:!1}),p(e,Symbol.iterator,{value:function(){new O(this.py_keys())},enumerable:!1}),p(e,"py_items",{value:I,enumerable:!1}),p(e,"py_del",{value:D,enumerable:!1}),p(e,"py_clear",{value:w,enumerable:!1}),p(e,"py_get",{value:M,enumerable:!1}),p(e,"py_setdefault",{value:j,enumerable:!1}),p(e,"py_pop",{value:F,enumerable:!1}),p(e,"py_popitem",{value:U,enumerable:!1}),p(e,"py_update",{value:W,enumerable:!1}),p(e,"py_values",{value:B,enumerable:!1}),p(e,"__getitem__",{value:K,enumerable:!1}),p(e,"__setitem__",{value:H,enumerable:!1}),e}function q(t,e){return"object"==typeof t&&"__mod__"in t?t.__mod__(e):"object"==typeof e&&"__rmod__"in e?e.__rmod__(t):(t%e+e)%e}Uint8Array.prototype.__add__=function(t){let e=new Uint8Array(this.length+t.length);return e.set(this),e.set(t,this.length),e},Uint8Array.prototype.__mul__=function(t){let e=new Uint8Array(t*this.length);for(let n=0;n<t;n++)e.set(this,n*this.length);return e},Uint8Array.prototype.__rmul__=Uint8Array.prototype.__mul__,String.prototype.__class__=k,k.__name__="str",k.__bases__=[u],String.prototype.__iter__=function(){new S(this)},String.prototype.__repr__=function(){return(-1==this.indexOf("'")?"'"+this+"'":'"'+this+'"').py_replace("\t","\\t").py_replace("\n","\\n")},String.prototype.__str__=function(){return this},String.prototype.capitalize=function(){return this.charAt(0).toUpperCase()+this.slice(1)},String.prototype.endswith=function(t){if(!(t instanceof Array))return""==t||this.slice(-t.length)==t;for(var e=0;e<t.length;e++)if(this.slice(-t[e].length)==t[e])return!0;return!1},String.prototype.find=function(t,e){return this.indexOf(t,e)},String.prototype.__getslice__=function(t,e,n){t<0&&(t=this.length+t),null==e?e=this.length:e<0&&(e=this.length+e);var r="";if(1==n)r=this.substring(t,e);else for(var i=t;i<e;i+=n)r=r.concat(this.charAt(i));return r},p(String.prototype,"format",{get:function(){return s(this,(function(t){var e=R([].slice.apply(arguments).slice(1)),n=0;return t.replace(/\{(\w*)\}/g,(function(t,r){if(""==r&&(r=n++),r==+r)return void 0===e[r]?t:k(e[r]);for(var i=0;i<e.length;i++)if("object"==typeof e[i]&&void 0!==e[i][r])return k(e[i][r]);return t}))}))},enumerable:!0}),String.prototype.isalnum=function(){return/^[0-9a-zA-Z]{1,}$/.test(this)},String.prototype.isalpha=function(){return/^[a-zA-Z]{1,}$/.test(this)},String.prototype.isdecimal=function(){return/^[0-9]{1,}$/.test(this)},String.prototype.isdigit=function(){return this.isdecimal()},String.prototype.islower=function(){return/^[a-z]{1,}$/.test(this)},String.prototype.isupper=function(){return/^[A-Z]{1,}$/.test(this)},String.prototype.isspace=function(){return/^[\s]{1,}$/.test(this)},String.prototype.isnumeric=function(){return!isNaN(parseFloat(this))&&isFinite(this)},String.prototype.join=function(t){return(t=Array.from(t)).join(this)},String.prototype.lower=function(){return this.toLowerCase()},String.prototype.py_replace=function(t,e,n){return this.split(t,n).join(e)},String.prototype.lstrip=function(){return this.replace(/^\s*/g,"")},String.prototype.rfind=function(t,e){return this.lastIndexOf(t,e)},String.prototype.rsplit=function(t,e){if(null==t||null==t){t=/\s+/;var n=this.strip()}else n=this;if(null==e||-1==e)return n.split(t);var r=n.split(t);if(e<r.length){var i=r.length-e;return[r.slice(0,i).join(t)].concat(r.slice(i))}return r},String.prototype.rstrip=function(){return this.replace(/\s*$/g,"")},String.prototype.py_split=function(t,e){if(null==t||null==t){t=/\s+/;var n=this.strip()}else n=this;if(null==e||-1==e)return n.split(t);var r=n.split(t);return e<r.length?r.slice(0,e).concat([r.slice(e).join(t)]):r},String.prototype.startswith=function(t){if(!(t instanceof Array))return 0==this.indexOf(t);for(var e=0;e<t.length;e++)if(0==this.indexOf(t[e]))return!0;return!1},String.prototype.strip=function(){return this.trim()},String.prototype.upper=function(){return this.toUpperCase()},String.prototype.__mul__=function(t){for(var e="",n=0;n<t;n++)e+=this;return e},String.prototype.__rmul__=String.prototype.__mul__,V.__name__="dict",V.__bases__=[u],p(Function.prototype,"__setdoc__",{value:function(t){return this.__doc__=t,this},enumerable:!1});var z=c("BaseException",[u],{__module__:r}),Y=c("Exception",[z],{__module__:r,get __init__(){return s(this,(function(t){var e=V();if(arguments.length){var n=arguments.length-1;if(arguments[n]&&arguments[n].hasOwnProperty("__kwargtrans__")){var r=arguments[n--];for(var i in r)switch(i){case"self":t=r[i];break;default:e[i]=r[i]}delete e.__kwargtrans__}var o=R([].slice.apply(arguments).slice(1,n+1))}else o=R();t.__args__=o;try{t.stack=e.error.stack}catch(e){t.stack="No stack trace available"}}))},get __repr__(){return s(this,(function(t){return _(t.__args__)>1?"{}{}".format(t.__class__.__name__,T(R(t.__args__))):_(t.__args__)?"{}({})".format(t.__class__.__name__,T(t.__args__[0])):"{}()".format(t.__class__.__name__)}))},get __str__(){return s(this,(function(t){return _(t.__args__)>1?k(R(t.__args__)):_(t.__args__)?k(t.__args__[0]):""}))}}),G=(c("IterableError",[Y],{__module__:r,get __init__(){return s(this,(function(t,e){Y.__init__(t,"Can't iterate over non-iterable",l({error:e}))}))}}),c("StopIteration",[Y],{__module__:r,get __init__(){return s(this,(function(t,e){Y.__init__(t,"Iterator exhausted",l({error:e}))}))}})),$=c("ValueError",[Y],{__module__:r,get __init__(){return s(this,(function(t,e,n){Y.__init__(t,e,l({error:n}))}))}}),X=c("KeyError",[Y],{__module__:r,get __init__(){return s(this,(function(t,e,n){Y.__init__(t,e,l({error:n}))}))}}),Q=(c("AssertionError",[Y],{__module__:r,get __init__(){return s(this,(function(t,e,n){e?Y.__init__(t,e,l({error:n})):Y.__init__(t,l({error:n}))}))}}),c("NotImplementedError",[Y],{__module__:r,get __init__(){return s(this,(function(t,e,n){Y.__init__(t,e,l({error:n}))}))}})),J=(c("IndexError",[Y],{__module__:r,get __init__(){return s(this,(function(t,e,n){Y.__init__(t,e,l({error:n}))}))}}),c("AttributeError",[Y],{__module__:r,get __init__(){return s(this,(function(t,e,n){Y.__init__(t,e,l({error:n}))}))}}),c("py_TypeError",[Y],{__module__:r,get __init__(){return s(this,(function(t,e,n){Y.__init__(t,e,l({error:n}))}))}}),c("Warning",[Y],{__module__:r})),Z=(c("UserWarning",[J],{__module__:r}),c("DeprecationWarning",[J],{__module__:r}),c("RuntimeWarning",[J],{__module__:r}),function(t,e,n){if(void 0===e||null!=e&&e.hasOwnProperty("__kwargtrans__"))e=null;if(void 0===n||null!=n&&n.hasOwnProperty("__kwargtrans__"))n=!1;if(arguments.length){var r=arguments.length-1;if(arguments[r]&&arguments[r].hasOwnProperty("__kwargtrans__")){var i=arguments[r--];for(var o in i)switch(o){case"iterable":t=i[o];break;case"key":e=i[o];break;case"reverse":n=i[o]}}}e?t.sort((function(t,n){if(arguments.length){var r=arguments.length-1;if(arguments[r]&&arguments[r].hasOwnProperty("__kwargtrans__")){var i=arguments[r--];for(var o in i)switch(o){case"a":t=i[o];break;case"b":n=i[o]}}}return e(t)>e(n)?1:-1})):t.sort(),n&&t.reverse()}),tt=function(t,e){return function(){var n=[];for(var r of e)n.append(t(r));return n}()},et=function(t,e){if(null==t)t=g;return function(){var n=[];for(var r of e)t(r)&&n.append(r);return n}()},nt=function(t,e){return R([Math.floor(t/e),q(t,e)])},rt=c("__Terminal__",[u],{__module__:r,get __init__(){return s(this,(function(t){t.buffer="";try{t.element=document.getElementById("__terminal__")}catch(e){t.element=null}t.element&&(t.element.style.overflowX="auto",t.element.style.boxSizing="border-box",t.element.style.padding="5px",t.element.innerHTML="_")}))},get print(){return s(this,(function(t){var e=" ",n="\n";if(arguments.length){var r=arguments.length-1;if(arguments[r]&&arguments[r].hasOwnProperty("__kwargtrans__")){var i=arguments[r--];for(var o in i)switch(o){case"self":t=i[o];break;case"sep":e=i[o];break;case"end":n=i[o]}}var s=R([].slice.apply(arguments).slice(1,r+1))}else s=R();t.buffer="{}{}{}".format(t.buffer,e.join(function(){var t=[];for(var e of s)t.append(k(e));return t}()),n).__getslice__(-4096,null,1),t.element?(t.element.innerHTML=t.buffer.py_replace("\n","<br>").py_replace(" ","&nbsp"),t.element.scrollTop=t.element.scrollHeight):console.log(e.join(function(){var t=[];for(var e of s)t.append(k(e));return t}()))}))},get input(){return s(this,(function(t,e){if(arguments.length){var n=arguments.length-1;if(arguments[n]&&arguments[n].hasOwnProperty("__kwargtrans__")){var r=arguments[n--];for(var i in r)switch(i){case"self":t=r[i];break;case"question":e=r[i]}}}t.print("{}".format(e),l({end:""}));var o=window.prompt("\n".join(t.buffer.py_split("\n").__getslice__(-8,null,1)));return t.print(o),o}))}})();rt.print,rt.input},function(t,e){function n(t){return"["+t.join(", ")+"]"}function r(t,e){return t.equals(e)}function i(t){return t.hashCode()}function o(t,e){return this.data={},this.hashFunction=t||i,this.equalsFunction=e||r,this}function s(){return this.data=[],this}function a(t,e){return this.data={},this.hashFunction=t||i,this.equalsFunction=e||r,this}function u(){return this.data={},this}function c(t){return this.defaultMapCtor=t||a,this.cacheMap=new this.defaultMapCtor,this}function l(){return this.count=0,this.hash=0,this}String.prototype.seed=String.prototype.seed||Math.round(Math.random()*Math.pow(2,32)),String.prototype.hashCode=function(){var t,e,n,r,i,o,s,a,u=this.toString();for(t=3&u.length,e=u.length-t,n=String.prototype.seed,i=3432918353,o=461845907,a=0;a<e;)s=255&u.charCodeAt(a)|(255&u.charCodeAt(++a))<<8|(255&u.charCodeAt(++a))<<16|(255&u.charCodeAt(++a))<<24,++a,n=27492+(65535&(r=5*(65535&(n=(n^=s=(65535&(s=(s=(65535&s)*i+(((s>>>16)*i&65535)<<16)&4294967295)<<15|s>>>17))*o+(((s>>>16)*o&65535)<<16)&4294967295)<<13|n>>>19))+((5*(n>>>16)&65535)<<16)&4294967295))+((58964+(r>>>16)&65535)<<16);switch(s=0,t){case 3:s^=(255&u.charCodeAt(a+2))<<16;case 2:s^=(255&u.charCodeAt(a+1))<<8;case 1:n^=s=(65535&(s=(s=(65535&(s^=255&u.charCodeAt(a)))*i+(((s>>>16)*i&65535)<<16)&4294967295)<<15|s>>>17))*o+(((s>>>16)*o&65535)<<16)&4294967295}return n^=u.length,n=2246822507*(65535&(n^=n>>>16))+((2246822507*(n>>>16)&65535)<<16)&4294967295,n=3266489909*(65535&(n^=n>>>13))+((3266489909*(n>>>16)&65535)<<16)&4294967295,(n^=n>>>16)>>>0},Object.defineProperty(o.prototype,"length",{get:function(){var t=0;for(var e in this.data)0===e.indexOf("hash_")&&(t+=this.data[e].length);return t}}),o.prototype.add=function(t){var e="hash_"+this.hashFunction(t);if(e in this.data){for(var n=this.data[e],r=0;r<n.length;r++)if(this.equalsFunction(t,n[r]))return n[r];return n.push(t),t}return this.data[e]=[t],t},o.prototype.contains=function(t){return null!=this.get(t)},o.prototype.get=function(t){var e="hash_"+this.hashFunction(t);if(e in this.data)for(var n=this.data[e],r=0;r<n.length;r++)if(this.equalsFunction(t,n[r]))return n[r];return null},o.prototype.values=function(){var t=[];for(var e in this.data)0===e.indexOf("hash_")&&(t=t.concat(this.data[e]));return t},o.prototype.toString=function(){return n(this.values())},s.prototype.add=function(t){this.data[t]=!0},s.prototype.or=function(t){var e=this;Object.keys(t.data).map((function(t){e.add(t)}))},s.prototype.remove=function(t){delete this.data[t]},s.prototype.contains=function(t){return!0===this.data[t]},s.prototype.values=function(){return Object.keys(this.data)},s.prototype.minValue=function(){return Math.min.apply(null,this.values())},s.prototype.hashCode=function(){var t=new l;return t.update(this.values()),t.finish()},s.prototype.equals=function(t){return t instanceof s&&this.hashCode()===t.hashCode()},Object.defineProperty(s.prototype,"length",{get:function(){return this.values().length}}),s.prototype.toString=function(){return"{"+this.values().join(", ")+"}"},Object.defineProperty(a.prototype,"length",{get:function(){var t=0;for(var e in this.data)0===e.indexOf("hash_")&&(t+=this.data[e].length);return t}}),a.prototype.put=function(t,e){var n="hash_"+this.hashFunction(t);if(n in this.data){for(var r=this.data[n],i=0;i<r.length;i++){var o=r[i];if(this.equalsFunction(t,o.key)){var s=o.value;return o.value=e,s}}return r.push({key:t,value:e}),e}return this.data[n]=[{key:t,value:e}],e},a.prototype.containsKey=function(t){var e="hash_"+this.hashFunction(t);if(e in this.data)for(var n=this.data[e],r=0;r<n.length;r++){var i=n[r];if(this.equalsFunction(t,i.key))return!0}return!1},a.prototype.get=function(t){var e="hash_"+this.hashFunction(t);if(e in this.data)for(var n=this.data[e],r=0;r<n.length;r++){var i=n[r];if(this.equalsFunction(t,i.key))return i.value}return null},a.prototype.entries=function(){var t=[];for(var e in this.data)0===e.indexOf("hash_")&&(t=t.concat(this.data[e]));return t},a.prototype.getKeys=function(){return this.entries().map((function(t){return t.key}))},a.prototype.getValues=function(){return this.entries().map((function(t){return t.value}))},a.prototype.toString=function(){return"["+this.entries().map((function(t){return"{"+t.key+":"+t.value+"}"})).join(", ")+"]"},u.prototype.get=function(t){return(t="k-"+t)in this.data?this.data[t]:null},u.prototype.put=function(t,e){t="k-"+t,this.data[t]=e},u.prototype.values=function(){var t=this.data;return Object.keys(this.data).map((function(e){return t[e]}))},l.prototype.update=function(){for(var t=0;t<arguments.length;t++){var e=arguments[t];if(null!=e)if(Array.isArray(e))this.update.apply(this,e);else{var n=0;switch(typeof e){case"undefined":case"function":continue;case"number":case"boolean":n=e;break;case"string":n=e.hashCode();break;default:e.updateHashCode?e.updateHashCode(this):console.log("No updateHashCode for "+e.toString());continue}n=(n*=3432918353)<<15|n>>>17,n*=461845907,this.count=this.count+1;var r=this.hash^n;r=5*(r=r<<13|r>>>19)+3864292196,this.hash=r}}},l.prototype.finish=function(){var t=this.hash^4*this.count;return t^=t>>>16,t*=2246822507,t^=t>>>13,t*=3266489909,t^=t>>>16},c.prototype.get=function(t,e){var n=this.cacheMap.get(t)||null;return null===n?null:n.get(e)||null},c.prototype.set=function(t,e,n){var r=this.cacheMap.get(t)||null;null===r&&(r=new this.defaultMapCtor,this.cacheMap.put(t,r)),r.put(e,n)},e.Hash=l,e.Set=o,e.Map=a,e.BitSet=s,e.AltDict=u,e.DoubleDict=c,e.hashStuff=function(){var t=new l;return t.update.apply(t,arguments),t.finish()},e.escapeWhitespace=function(t,e){return t=t.replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r"),e&&(t=t.replace(/ /g,"·")),t},e.arrayToString=n,e.titleCase=function(t){return t.replace(/\w\S*/g,(function(t){return t.charAt(0).toUpperCase()+t.substr(1)}))},e.equalArrays=function(t,e){if(!Array.isArray(t)||!Array.isArray(e))return!1;if(t==e)return!0;if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!=e[n]&&!t[n].equals(e[n]))return!1;return!0}},function(t,e){function n(){return this.source=null,this.type=null,this.channel=null,this.start=null,this.stop=null,this.tokenIndex=null,this.line=null,this.column=null,this._text=null,this}function r(t,e,i,o,s){return n.call(this),this.source=void 0!==t?t:r.EMPTY_SOURCE,this.type=void 0!==e?e:null,this.channel=void 0!==i?i:n.DEFAULT_CHANNEL,this.start=void 0!==o?o:-1,this.stop=void 0!==s?s:-1,this.tokenIndex=-1,null!==this.source[0]?(this.line=t[0].line,this.column=t[0].column):this.column=-1,this}n.INVALID_TYPE=0,n.EPSILON=-2,n.MIN_USER_TOKEN_TYPE=1,n.EOF=-1,n.DEFAULT_CHANNEL=0,n.HIDDEN_CHANNEL=1,Object.defineProperty(n.prototype,"text",{get:function(){return this._text},set:function(t){this._text=t}}),n.prototype.getTokenSource=function(){return this.source[0]},n.prototype.getInputStream=function(){return this.source[1]},r.prototype=Object.create(n.prototype),r.prototype.constructor=r,r.EMPTY_SOURCE=[null,null],r.prototype.clone=function(){var t=new r(this.source,this.type,this.channel,this.start,this.stop);return t.tokenIndex=this.tokenIndex,t.line=this.line,t.column=this.column,t.text=this.text,t},Object.defineProperty(r.prototype,"text",{get:function(){if(null!==this._text)return this._text;var t=this.getInputStream();if(null===t)return null;var e=t.size;return this.start<e&&this.stop<e?t.getText(this.start,this.stop):"<EOF>"},set:function(t){this._text=t}}),r.prototype.toString=function(){var t=this.text;return t=null!==t?t.replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t"):"<no text>","[@"+this.tokenIndex+","+this.start+":"+this.stop+"='"+t+"',<"+this.type+">"+(this.channel>0?",channel="+this.channel:"")+","+this.line+":"+this.column+"]"},e.Token=n,e.CommonToken=r},function(t,e,n){var r=n(2).Token;function i(t,e){return this.start=t,this.stop=e,this}function o(){this.intervals=null,this.readOnly=!1}i.prototype.contains=function(t){return t>=this.start&&t<this.stop},i.prototype.toString=function(){return this.start===this.stop-1?this.start.toString():this.start.toString()+".."+(this.stop-1).toString()},Object.defineProperty(i.prototype,"length",{get:function(){return this.stop-this.start}}),o.prototype.first=function(t){return null===this.intervals||0===this.intervals.length?r.INVALID_TYPE:this.intervals[0].start},o.prototype.addOne=function(t){this.addInterval(new i(t,t+1))},o.prototype.addRange=function(t,e){this.addInterval(new i(t,e+1))},o.prototype.addInterval=function(t){if(null===this.intervals)this.intervals=[],this.intervals.push(t);else{for(var e=0;e<this.intervals.length;e++){var n=this.intervals[e];if(t.stop<n.start)return void this.intervals.splice(e,0,t);if(t.stop===n.start)return void(this.intervals[e].start=t.start);if(t.start<=n.stop)return this.intervals[e]=new i(Math.min(n.start,t.start),Math.max(n.stop,t.stop)),void this.reduce(e)}this.intervals.push(t)}},o.prototype.addSet=function(t){if(null!==t.intervals)for(var e=0;e<t.intervals.length;e++){var n=t.intervals[e];this.addInterval(new i(n.start,n.stop))}return this},o.prototype.reduce=function(t){if(t<this.intervalslength-1){var e=this.intervals[t],n=this.intervals[t+1];e.stop>=n.stop?(this.intervals.pop(t+1),this.reduce(t)):e.stop>=n.start&&(this.intervals[t]=new i(e.start,n.stop),this.intervals.pop(t+1))}},o.prototype.complement=function(t,e){var n=new o;n.addInterval(new i(t,e+1));for(var r=0;r<this.intervals.length;r++)n.removeRange(this.intervals[r]);return n},o.prototype.contains=function(t){if(null===this.intervals)return!1;for(var e=0;e<this.intervals.length;e++)if(this.intervals[e].contains(t))return!0;return!1},Object.defineProperty(o.prototype,"length",{get:function(){var t=0;return this.intervals.map((function(e){t+=e.length})),t}}),o.prototype.removeRange=function(t){if(t.start===t.stop-1)this.removeOne(t.start);else if(null!==this.intervals)for(var e=0,n=0;n<this.intervals.length;n++){var r=this.intervals[e];if(t.stop<=r.start)return;if(t.start>r.start&&t.stop<r.stop){this.intervals[e]=new i(r.start,t.start);var o=new i(t.stop,r.stop);return void this.intervals.splice(e,0,o)}t.start<=r.start&&t.stop>=r.stop?(this.intervals.splice(e,1),e-=1):t.start<r.stop?this.intervals[e]=new i(r.start,t.start):t.stop<r.stop&&(this.intervals[e]=new i(t.stop,r.stop)),e+=1}},o.prototype.removeOne=function(t){if(null!==this.intervals)for(var e=0;e<this.intervals.length;e++){var n=this.intervals[e];if(t<n.start)return;if(t===n.start&&t===n.stop-1)return void this.intervals.splice(e,1);if(t===n.start)return void(this.intervals[e]=new i(n.start+1,n.stop));if(t===n.stop-1)return void(this.intervals[e]=new i(n.start,n.stop-1));if(t<n.stop-1){var r=new i(n.start,t);return n.start=t+1,void this.intervals.splice(e,0,r)}}},o.prototype.toString=function(t,e,n){return t=t||null,e=e||null,n=n||!1,null===this.intervals?"{}":null!==t||null!==e?this.toTokenString(t,e):n?this.toCharString():this.toIndexString()},o.prototype.toCharString=function(){for(var t=[],e=0;e<this.intervals.length;e++){var n=this.intervals[e];n.stop===n.start+1?n.start===r.EOF?t.push("<EOF>"):t.push("'"+String.fromCharCode(n.start)+"'"):t.push("'"+String.fromCharCode(n.start)+"'..'"+String.fromCharCode(n.stop-1)+"'")}return t.length>1?"{"+t.join(", ")+"}":t[0]},o.prototype.toIndexString=function(){for(var t=[],e=0;e<this.intervals.length;e++){var n=this.intervals[e];n.stop===n.start+1?n.start===r.EOF?t.push("<EOF>"):t.push(n.start.toString()):t.push(n.start.toString()+".."+(n.stop-1).toString())}return t.length>1?"{"+t.join(", ")+"}":t[0]},o.prototype.toTokenString=function(t,e){for(var n=[],r=0;r<this.intervals.length;r++)for(var i=this.intervals[r],o=i.start;o<i.stop;o++)n.push(this.elementName(t,e,o));return n.length>1?"{"+n.join(", ")+"}":n[0]},o.prototype.elementName=function(t,e,n){return n===r.EOF?"<EOF>":n===r.EPSILON?"<EPSILON>":t[n]||e[n]},e.Interval=i,e.IntervalSet=o},function(t,e){function n(){return this.atn=null,this.stateNumber=n.INVALID_STATE_NUMBER,this.stateType=null,this.ruleIndex=0,this.epsilonOnlyTransitions=!1,this.transitions=[],this.nextTokenWithinRule=null,this}function r(){return n.call(this),this.stateType=n.BASIC,this}function i(){return n.call(this),this.decision=-1,this.nonGreedy=!1,this}function o(){return i.call(this),this.endState=null,this}function s(){return o.call(this),this.stateType=n.BLOCK_START,this}function a(){return n.call(this),this.stateType=n.BLOCK_END,this.startState=null,this}function u(){return n.call(this),this.stateType=n.RULE_STOP,this}function c(){return n.call(this),this.stateType=n.RULE_START,this.stopState=null,this.isPrecedenceRule=!1,this}function l(){return i.call(this),this.stateType=n.PLUS_LOOP_BACK,this}function p(){return o.call(this),this.stateType=n.PLUS_BLOCK_START,this.loopBackState=null,this}function h(){return o.call(this),this.stateType=n.STAR_BLOCK_START,this}function f(){return n.call(this),this.stateType=n.STAR_LOOP_BACK,this}function _(){return i.call(this),this.stateType=n.STAR_LOOP_ENTRY,this.loopBackState=null,this.isPrecedenceDecision=null,this}function d(){return n.call(this),this.stateType=n.LOOP_END,this.loopBackState=null,this}function y(){return i.call(this),this.stateType=n.TOKEN_START,this}n.INVALID_TYPE=0,n.BASIC=1,n.RULE_START=2,n.BLOCK_START=3,n.PLUS_BLOCK_START=4,n.STAR_BLOCK_START=5,n.TOKEN_START=6,n.RULE_STOP=7,n.BLOCK_END=8,n.STAR_LOOP_BACK=9,n.STAR_LOOP_ENTRY=10,n.PLUS_LOOP_BACK=11,n.LOOP_END=12,n.serializationNames=["INVALID","BASIC","RULE_START","BLOCK_START","PLUS_BLOCK_START","STAR_BLOCK_START","TOKEN_START","RULE_STOP","BLOCK_END","STAR_LOOP_BACK","STAR_LOOP_ENTRY","PLUS_LOOP_BACK","LOOP_END"],n.INVALID_STATE_NUMBER=-1,n.prototype.toString=function(){return this.stateNumber},n.prototype.equals=function(t){return t instanceof n&&this.stateNumber===t.stateNumber},n.prototype.isNonGreedyExitState=function(){return!1},n.prototype.addTransition=function(t,e){void 0===e&&(e=-1),0===this.transitions.length?this.epsilonOnlyTransitions=t.isEpsilon:this.epsilonOnlyTransitions!==t.isEpsilon&&(this.epsilonOnlyTransitions=!1),-1===e?this.transitions.push(t):this.transitions.splice(e,1,t)},r.prototype=Object.create(n.prototype),r.prototype.constructor=r,i.prototype=Object.create(n.prototype),i.prototype.constructor=i,o.prototype=Object.create(i.prototype),o.prototype.constructor=o,s.prototype=Object.create(o.prototype),s.prototype.constructor=s,a.prototype=Object.create(n.prototype),a.prototype.constructor=a,u.prototype=Object.create(n.prototype),u.prototype.constructor=u,c.prototype=Object.create(n.prototype),c.prototype.constructor=c,l.prototype=Object.create(i.prototype),l.prototype.constructor=l,p.prototype=Object.create(o.prototype),p.prototype.constructor=p,h.prototype=Object.create(o.prototype),h.prototype.constructor=h,f.prototype=Object.create(n.prototype),f.prototype.constructor=f,_.prototype=Object.create(i.prototype),_.prototype.constructor=_,d.prototype=Object.create(n.prototype),d.prototype.constructor=d,y.prototype=Object.create(i.prototype),y.prototype.constructor=y,e.ATNState=n,e.BasicState=r,e.DecisionState=i,e.BlockStartState=o,e.BlockEndState=a,e.LoopEndState=d,e.RuleStartState=c,e.RuleStopState=u,e.TokensStartState=y,e.PlusLoopbackState=l,e.StarLoopbackState=f,e.StarLoopEntryState=_,e.PlusBlockStartState=p,e.StarBlockStartState=h,e.BasicBlockStartState=s},function(t,e,n){var r=n(2).Token,i=n(3).Interval,o=new i(-1,-2);n(1);function s(){return this}function a(){return s.call(this),this}function u(){return a.call(this),this}function c(){return u.call(this),this}function l(){return u.call(this),this}function p(){return l.call(this),this}function h(){return this}function f(){return this}function _(t){return l.call(this),this.parentCtx=null,this.symbol=t,this}function d(t){return _.call(this,t),this}function y(){return this}a.prototype=Object.create(s.prototype),a.prototype.constructor=a,u.prototype=Object.create(a.prototype),u.prototype.constructor=u,c.prototype=Object.create(u.prototype),c.prototype.constructor=c,l.prototype=Object.create(u.prototype),l.prototype.constructor=l,p.prototype=Object.create(l.prototype),p.prototype.constructor=p,h.prototype.visit=function(t){return Array.isArray(t)?t.map((function(t){return t.accept(this)}),this):t.accept(this)},h.prototype.visitChildren=function(t){return t.children?this.visit(t.children):null},h.prototype.visitTerminal=function(t){},h.prototype.visitErrorNode=function(t){},f.prototype.visitTerminal=function(t){},f.prototype.visitErrorNode=function(t){},f.prototype.enterEveryRule=function(t){},f.prototype.exitEveryRule=function(t){},_.prototype=Object.create(l.prototype),_.prototype.constructor=_,_.prototype.getChild=function(t){return null},_.prototype.getSymbol=function(){return this.symbol},_.prototype.getParent=function(){return this.parentCtx},_.prototype.getPayload=function(){return this.symbol},_.prototype.getSourceInterval=function(){if(null===this.symbol)return o;var t=this.symbol.tokenIndex;return new i(t,t)},_.prototype.getChildCount=function(){return 0},_.prototype.accept=function(t){return t.visitTerminal(this)},_.prototype.getText=function(){return this.symbol.text},_.prototype.toString=function(){return this.symbol.type===r.EOF?"<EOF>":this.symbol.text},d.prototype=Object.create(_.prototype),d.prototype.constructor=d,d.prototype.isErrorNode=function(){return!0},d.prototype.accept=function(t){return t.visitErrorNode(this)},y.prototype.walk=function(t,e){if(e instanceof p||void 0!==e.isErrorNode&&e.isErrorNode())t.visitErrorNode(e);else if(e instanceof l)t.visitTerminal(e);else{this.enterRule(t,e);for(var n=0;n<e.getChildCount();n++){var r=e.getChild(n);this.walk(t,r)}this.exitRule(t,e)}},y.prototype.enterRule=function(t,e){var n=e.getRuleContext();t.enterEveryRule(n),n.enterRule(t)},y.prototype.exitRule=function(t,e){var n=e.getRuleContext();n.exitRule(t),t.exitEveryRule(n)},y.DEFAULT=new y,e.RuleNode=c,e.ErrorNode=p,e.TerminalNode=l,e.ErrorNodeImpl=d,e.TerminalNodeImpl=_,e.ParseTreeListener=f,e.ParseTreeVisitor=h,e.ParseTreeWalker=y,e.INVALID_INTERVAL=o},function(t,e,n){var r=n(10).PredicateTransition;function i(t){if(Error.call(this),Error.captureStackTrace)Error.captureStackTrace(this,i);else(new Error).stack;return this.message=t.message,this.recognizer=t.recognizer,this.input=t.input,this.ctx=t.ctx,this.offendingToken=null,this.offendingState=-1,null!==this.recognizer&&(this.offendingState=this.recognizer.state),this}function o(t,e,n,r){return i.call(this,{message:"",recognizer:t,input:e,ctx:null}),this.startIndex=n,this.deadEndConfigs=r,this}function s(t,e,n,r,o,s){s=s||t._ctx,r=r||t.getCurrentToken(),n=n||t.getCurrentToken(),e=e||t.getInputStream(),i.call(this,{message:"",recognizer:t,input:e,ctx:s}),this.deadEndConfigs=o,this.startToken=n,this.offendingToken=r}function a(t){i.call(this,{message:"",recognizer:t,input:t.getInputStream(),ctx:t._ctx}),this.offendingToken=t.getCurrentToken()}function u(t,e,n){i.call(this,{message:this.formatMessage(e,n||null),recognizer:t,input:t.getInputStream(),ctx:t._ctx});var o=t._interp.atn.states[t.state].transitions[0];return o instanceof r?(this.ruleIndex=o.ruleIndex,this.predicateIndex=o.predIndex):(this.ruleIndex=0,this.predicateIndex=0),this.predicate=e,this.offendingToken=t.getCurrentToken(),this}function c(){return Error.call(this),Error.captureStackTrace(this,c),this}i.prototype=Object.create(Error.prototype),i.prototype.constructor=i,i.prototype.getExpectedTokens=function(){return null!==this.recognizer?this.recognizer.atn.getExpectedTokens(this.offendingState,this.ctx):null},i.prototype.toString=function(){return this.message},o.prototype=Object.create(i.prototype),o.prototype.constructor=o,o.prototype.toString=function(){var t="";return this.startIndex>=0&&this.startIndex<this.input.size&&(t=this.input.getText((this.startIndex,this.startIndex))),"LexerNoViableAltException"+t},s.prototype=Object.create(i.prototype),s.prototype.constructor=s,a.prototype=Object.create(i.prototype),a.prototype.constructor=a,u.prototype=Object.create(i.prototype),u.prototype.constructor=u,u.prototype.formatMessage=function(t,e){return null!==e?e:"failed predicate: {"+t+"}?"},c.prototype=Object.create(Error.prototype),c.prototype.constructor=c,e.RecognitionException=i,e.NoViableAltException=s,e.LexerNoViableAltException=o,e.InputMismatchException=a,e.FailedPredicateException=u,e.ParseCancellationException=c},function(t,e,n){"use strict";n.d(e,"f",(function(){return Z})),n.d(e,"e",(function(){return tt})),n.d(e,"b",(function(){return et})),n.d(e,"a",(function(){return nt})),n.d(e,"c",(function(){return rt})),n.d(e,"d",(function(){return it})),n.d(e,"g",(function(){return ot})),n.d(e,"h",(function(){return st}));var r={};n.r(r),n.d(r,"pi",(function(){return s})),n.d(r,"e",(function(){return a})),n.d(r,"exp",(function(){return u})),n.d(r,"expm1",(function(){return c})),n.d(r,"log",(function(){return l})),n.d(r,"log1p",(function(){return p})),n.d(r,"log2",(function(){return h})),n.d(r,"log10",(function(){return f})),n.d(r,"pow",(function(){return _})),n.d(r,"sqrt",(function(){return d})),n.d(r,"sin",(function(){return y})),n.d(r,"cos",(function(){return g})),n.d(r,"tan",(function(){return v})),n.d(r,"asin",(function(){return m})),n.d(r,"acos",(function(){return x})),n.d(r,"atan",(function(){return T})),n.d(r,"atan2",(function(){return E})),n.d(r,"hypot",(function(){return S})),n.d(r,"degrees",(function(){return O})),n.d(r,"radians",(function(){return C})),n.d(r,"sinh",(function(){return A})),n.d(r,"cosh",(function(){return b})),n.d(r,"tanh",(function(){return R})),n.d(r,"asinh",(function(){return P})),n.d(r,"acosh",(function(){return k})),n.d(r,"atanh",(function(){return N})),n.d(r,"floor",(function(){return L})),n.d(r,"ceil",(function(){return I})),n.d(r,"trunc",(function(){return D})),n.d(r,"isnan",(function(){return w})),n.d(r,"inf",(function(){return M})),n.d(r,"nan",(function(){return j})),n.d(r,"modf",(function(){return F}));var i={};n.r(i),n.d(i,"_array",(function(){return W})),n.d(i,"_index",(function(){return B})),n.d(i,"_bitmask1",(function(){return K})),n.d(i,"_bitmask2",(function(){return H})),n.d(i,"_bitmask3",(function(){return V})),n.d(i,"_fill_array",(function(){return q})),n.d(i,"_random_integer",(function(){return z})),n.d(i,"seed",(function(){return Y})),n.d(i,"randint",(function(){return G})),n.d(i,"choice",(function(){return $})),n.d(i,"random",(function(){return X})),n.d(i,"shuffle",(function(){return Q}));var o=n(0),s=Math.PI,a=Math.E,u=Math.exp,c=function(t){return Math.exp(t)-1},l=function(t,e){return void 0===e?Math.log(t):Math.log(t)/Math.log(e)},p=function(t){return Math.log(t+1)},h=function(t){return Math.log(t)/Math.LN2},f=function(t){return Math.log(t)/Math.LN10},_=Math.pow,d=Math.sqrt,y=Math.sin,g=Math.cos,v=Math.tan,m=Math.asin,x=Math.acos,T=Math.atan,E=Math.atan2,S=Math.hypot,O=function(t){return 180*t/Math.PI},C=function(t){return t*Math.PI/180},A=Math.sinh,b=Math.cosh,R=Math.tanh,P=Math.asinh,k=Math.acosh,N=Math.atanh,L=Math.floor,I=Math.ceil,D=Math.trunc,w=isNaN,M=1/0,j=NaN,F=function(t){var e=t>=0?1:-1,n=Object(o.j)(Object(o.h)(t),1),r=n[0],i=n[1];return Object(o.s)([i*e,r*e])},U={};Object(o.g)(U,"",r);var W=function(){for(var t=[],e=0;e<624;e++)t.append(0);return t}(),B=0,K=Math.pow(2,32)-1,H=Math.pow(2,31),V=Math.pow(2,31)-1,q=function(){for(var t=0;t<624;t++){var e=(W[t]&H)+(W[Object(o.f)(t+1,624)]&V);W[t]=W[Object(o.f)(t+397,624)]^e>>1,0!=Object(o.f)(e,2)&&(W[t]^=2567483615)}},z=function(){0==B&&q();var t=W[B];return t^=t>>11,t^=t<<7&2636928640,t^=t<<15&4022730752,t^=t>>18,B=Object(o.f)(B+1,624),t},Y=function(t){if(void 0===t||null!=t&&t.hasOwnProperty("__kwargtrans__"))t=Object(o.l)(V*Math.random());W[0]=t;for(var e=1;e<624;e++)W[e]=(1812433253*W[e-1]^(W[e-1]>>30)+e)&K},G=function(t,e){return t+Object(o.f)(z(),e-t+1)},$=function(t){return t[G(0,Object(o.n)(t)-1)]},X=function(){return z()/V},Q=function(t){for(var e of Object(o.q)(Object(o.n)(t)-1,0,-1)){var n=U.floor(X()*(e+1)),r=t[e];t[e]=t[n],t[n]=r}};Y();n(22);var J={};Object(o.g)(J,"",i);var Z=Object(o.c)("RuleDefinitions",[o.p],{__module__:"sifaru_yusin.RuleDefinitions",get __init__(){return Object(o.d)(this,(function(t){t.definitions=Object(o.i)({})}))},get define(){return Object(o.d)(this,(function(t,e,n){t.definitions[e]=n}))},get kekure(){return Object(o.d)(this,(function(t,e,n){return t.definitions[e].kekure(n)}))}}),tt=Object(o.c)("Rule",[o.p],{__module__:"sifaru_yusin.RuleDefinitions",get kekure(){return Object(o.d)(this,(function(t,e){var n=Object(o.b)("Rule#kekure should be implemented in the sub class.");throw n.__cause__=null,n}))}}),et=Object(o.c)("ChoiceRuleItem",[o.p],{__module__:"sifaru_yusin.RuleDefinitions",get __init__(){return Object(o.d)(this,(function(t,e,n){t.rule=e,t.weight=n}))}}),nt=Object(o.c)("ChoiceRule",[tt],{__module__:"sifaru_yusin.RuleDefinitions",get __init__(){return Object(o.d)(this,(function(t,e){t.py_items=e}))},get kekure(){return Object(o.d)(this,(function(t,e){var n=Object(o.r)(Object(o.o)((function(t){return t.weight}),t.py_items))*J.random(),r=0;for(var i of t.py_items){if((r=r+i.weight)>n)return i.rule.kekure(e)}}))}}),rt=Object(o.c)("DifferenceRule",[tt],{__module__:"sifaru_yusin.RuleDefinitions",get __init__(){return Object(o.d)(this,(function(t,e,n){t.lhs=e,t.rhs=n}))},get kekure(){return Object(o.d)(this,(function(t,e){if(Object(o.m)(t.lhs,o.s)&&"WordName"==t.lhs[0])var n=e.get_rule(t.lhs[1]);else n=t.lhs;if(!Object(o.m)(n,nt))throw(u=Object(o.a)("Can't get a difference except from a ChoiceRule.")).__cause__=null,u;if(Object(o.m)(t.rhs,o.s)&&"WordName"==t.rhs[0])var r=e.get_rule(t.rhs[1]);else if(Object(o.m)(t.rhs,it))r=st(t.rhs.kekure(e));else r=t.rhs;if(Object(o.m)(r,nt)){var i=[];for(var s of r.py_items){if(!Object(o.m)(s.rule,st))throw(u=Object(o.a)("Can't get a difference by a ChoiceRule of not StringRule-s.")).__cause__=null,u;i.append(s.rule.value)}}else{if(!Object(o.m)(r,st))throw(u=Object(o.a)("Can't get a difference except by a ChoiceRule or a StringRule.")).__cause__=null,u;i=[r.value]}var a=[];for(var s of n.py_items){var u;if(!Object(o.m)(s.rule,st))throw(u=Object(o.a)("Can't get a difference except from a ChoiceRule of StringRule-s.")).__cause__=null,u;Object(o.e)(s.rule.value,i)||a.append(s)}var c=nt(a).kekure(e);return Object(o.m)(t.lhs,o.s)&&"WordName"==t.lhs[0]&&e.push_reference(t.lhs[1],c),c}))}}),it=Object(o.c)("ReferenceRule",[tt],{__module__:"sifaru_yusin.RuleDefinitions",get __init__(){return Object(o.d)(this,(function(t,e,n){t.rule_name=e,t.position=n}))},get kekure(){return Object(o.d)(this,(function(t,e){return e.get_reference(t.rule_name,t.position)}))}}),ot=Object(o.c)("SequenceRule",[tt],{__module__:"sifaru_yusin.RuleDefinitions",get __init__(){return Object(o.d)(this,(function(t,e){t.children=e}))},get kekure(){return Object(o.d)(this,(function(t,e){var n=[];for(var r of t.children)if(Object(o.m)(r,tt))n.append(r.kekure(e));else if(Object(o.m)(r,o.s)&&"WordName"==r[0]){var i=r[1],s=e.kekure(i);e.push_reference(i,s),n.append(s)}return"".join(n)}))}}),st=Object(o.c)("StringRule",[tt],{__module__:"sifaru_yusin.RuleDefinitions",get __init__(){return Object(o.d)(this,(function(t,e){t.value=e}))},get kekure(){return Object(o.d)(this,(function(t,e){return t.value}))}})},function(t,e,n){var r=n(16).RuleContext,i=n(1).Hash,o=n(1).Map;function s(t){this.cachedHashCode=t}function a(){return this.cache=new o,this}function u(t,e){var n,r=new i;null!==t?r.update(t,e):r.update(1),n=r.finish(),s.call(this,n),this.parentCtx=t,this.returnState=e}function c(){return u.call(this,null,s.EMPTY_RETURN_STATE),this}function l(t,e){var n=new i;n.update(t,e);var r=n.finish();return s.call(this,r),this.parents=t,this.returnStates=e,this}function p(t,e,n,r){if(t===e)return t;if(t instanceof u&&e instanceof u)return function(t,e,n,r){if(null!==r){var i=r.get(t,e);if(null!==i)return i;if(null!==(i=r.get(e,t)))return i}var o=function(t,e,n){if(n){if(t===s.EMPTY)return s.EMPTY;if(e===s.EMPTY)return s.EMPTY}else{if(t===s.EMPTY&&e===s.EMPTY)return s.EMPTY;if(t===s.EMPTY){var r=[e.returnState,s.EMPTY_RETURN_STATE];return new l([e.parentCtx,null],r)}if(e===s.EMPTY){r=[t.returnState,s.EMPTY_RETURN_STATE];return new l([t.parentCtx,null],r)}}return null}(t,e,n);if(null!==o)return null!==r&&r.set(t,e,o),o;if(t.returnState===e.returnState){var a=p(t.parentCtx,e.parentCtx,n,r);if(a===t.parentCtx)return t;if(a===e.parentCtx)return e;var c=u.create(a,t.returnState);return null!==r&&r.set(t,e,c),c}var h=null;if((t===e||null!==t.parentCtx&&t.parentCtx===e.parentCtx)&&(h=t.parentCtx),null!==h){var f=[t.returnState,e.returnState];t.returnState>e.returnState&&(f[0]=e.returnState,f[1]=t.returnState);var _=new l(d=[h,h],f);return null!==r&&r.set(t,e,_),_}f=[t.returnState,e.returnState];var d=[t.parentCtx,e.parentCtx];t.returnState>e.returnState&&(f[0]=e.returnState,f[1]=t.returnState,d=[e.parentCtx,t.parentCtx]);var y=new l(d,f);return null!==r&&r.set(t,e,y),y}(t,e,n,r);if(n){if(t instanceof c)return t;if(e instanceof c)return e}return t instanceof u&&(t=new l([t.getParent()],[t.returnState])),e instanceof u&&(e=new l([e.getParent()],[e.returnState])),function(t,e,n,r){if(null!==r){var i=r.get(t,e);if(null!==i)return i;if(null!==(i=r.get(e,t)))return i}var a=0,c=0,h=0,f=[],_=[];for(;a<t.returnStates.length&&c<e.returnStates.length;){var d=t.parents[a],y=e.parents[c];if(t.returnStates[a]===e.returnStates[c]){var g=t.returnStates[a],v=g===s.EMPTY_RETURN_STATE&&null===d&&null===y,m=null!==d&&null!==y&&d===y;if(v||m)_[h]=d,f[h]=g;else{var x=p(d,y,n,r);_[h]=x,f[h]=g}a+=1,c+=1}else t.returnStates[a]<e.returnStates[c]?(_[h]=d,f[h]=t.returnStates[a],a+=1):(_[h]=y,f[h]=e.returnStates[c],c+=1);h+=1}if(a<t.returnStates.length)for(var T=a;T<t.returnStates.length;T++)_[h]=t.parents[T],f[h]=t.returnStates[T],h+=1;else for(T=c;T<e.returnStates.length;T++)_[h]=e.parents[T],f[h]=e.returnStates[T],h+=1;if(h<_.length){if(1===h){var E=u.create(_[0],f[0]);return null!==r&&r.set(t,e,E),E}_=_.slice(0,h),f=f.slice(0,h)}var S=new l(_,f);if(S===t)return null!==r&&r.set(t,e,t),t;if(S===e)return null!==r&&r.set(t,e,e),e;(function(t){for(var e=new o,n=0;n<t.length;n++){var r=t[n];e.containsKey(r)||e.put(r,r)}for(var i=0;i<t.length;i++)t[i]=e.get(t[i])})(_),null!==r&&r.set(t,e,S);return S}(t,e,n,r)}s.EMPTY=null,s.EMPTY_RETURN_STATE=2147483647,s.globalNodeCount=1,s.id=s.globalNodeCount,s.prototype.isEmpty=function(){return this===s.EMPTY},s.prototype.hasEmptyPath=function(){return this.getReturnState(this.length-1)===s.EMPTY_RETURN_STATE},s.prototype.hashCode=function(){return this.cachedHashCode},s.prototype.updateHashCode=function(t){t.update(this.cachedHashCode)},a.prototype.add=function(t){if(t===s.EMPTY)return s.EMPTY;var e=this.cache.get(t)||null;return null!==e?e:(this.cache.put(t,t),t)},a.prototype.get=function(t){return this.cache.get(t)||null},Object.defineProperty(a.prototype,"length",{get:function(){return this.cache.length}}),u.prototype=Object.create(s.prototype),u.prototype.contructor=u,u.create=function(t,e){return e===s.EMPTY_RETURN_STATE&&null===t?s.EMPTY:new u(t,e)},Object.defineProperty(u.prototype,"length",{get:function(){return 1}}),u.prototype.getParent=function(t){return this.parentCtx},u.prototype.getReturnState=function(t){return this.returnState},u.prototype.equals=function(t){return this===t||t instanceof u&&(this.hashCode()===t.hashCode()&&(this.returnState===t.returnState&&(null==this.parentCtx?null==t.parentCtx:this.parentCtx.equals(t.parentCtx))))},u.prototype.toString=function(){var t=null===this.parentCtx?"":this.parentCtx.toString();return 0===t.length?this.returnState===s.EMPTY_RETURN_STATE?"$":""+this.returnState:this.returnState+" "+t},c.prototype=Object.create(u.prototype),c.prototype.constructor=c,c.prototype.isEmpty=function(){return!0},c.prototype.getParent=function(t){return null},c.prototype.getReturnState=function(t){return this.returnState},c.prototype.equals=function(t){return this===t},c.prototype.toString=function(){return"$"},s.EMPTY=new c,l.prototype=Object.create(s.prototype),l.prototype.constructor=l,l.prototype.isEmpty=function(){return this.returnStates[0]===s.EMPTY_RETURN_STATE},Object.defineProperty(l.prototype,"length",{get:function(){return this.returnStates.length}}),l.prototype.getParent=function(t){return this.parents[t]},l.prototype.getReturnState=function(t){return this.returnStates[t]},l.prototype.equals=function(t){return this===t||t instanceof l&&(this.hashCode()===t.hashCode()&&(this.returnStates===t.returnStates&&this.parents===t.parents))},l.prototype.toString=function(){if(this.isEmpty())return"[]";for(var t="[",e=0;e<this.returnStates.length;e++)e>0&&(t+=", "),this.returnStates[e]!==s.EMPTY_RETURN_STATE?(t+=this.returnStates[e],null!==this.parents[e]?t=t+" "+this.parents[e]:t+="null"):t+="$";return t+"]"},e.merge=p,e.PredictionContext=s,e.PredictionContextCache=a,e.SingletonPredictionContext=u,e.predictionContextFromRuleContext=function t(e,n){if(null==n&&(n=r.EMPTY),null===n.parentCtx||n===r.EMPTY)return s.EMPTY;var i=t(e,n.parentCtx),o=e.states[n.invokingState].transitions[0];return u.create(i,o.followState.stateNumber)},e.getCachedPredictionContext=function t(e,n,r){if(e.isEmpty())return e;var i=r.get(e)||null;if(null!==i)return i;if(null!==(i=n.get(e)))return r.put(e,i),i;for(var o=!1,a=[],c=0;c<a.length;c++){var p=t(e.getParent(c),n,r);if(o||p!==e.getParent(c)){if(!o){a=[];for(var h=0;h<e.length;h++)a[h]=e.getParent(h);o=!0}a[c]=p}}if(!o)return n.add(e),r.put(e,e),e;var f=null;return f=0===a.length?s.EMPTY:1===a.length?u.create(a[0],e.getReturnState(0)):new l(a,e.returnStates),n.add(f),r.put(f,f),r.put(e,f),f}},function(t,e,n){var r=n(38).LL1Analyzer,i=n(3).IntervalSet;function o(t,e){return this.grammarType=t,this.maxTokenType=e,this.states=[],this.decisionToState=[],this.ruleToStartState=[],this.ruleToStopState=null,this.modeNameToStartState={},this.ruleToTokenType=null,this.lexerActions=null,this.modeToStartState=[],this}o.prototype.nextTokensInContext=function(t,e){return new r(this).LOOK(t,null,e)},o.prototype.nextTokensNoContext=function(t){return null!==t.nextTokenWithinRule||(t.nextTokenWithinRule=this.nextTokensInContext(t,null),t.nextTokenWithinRule.readOnly=!0),t.nextTokenWithinRule},o.prototype.nextTokens=function(t,e){return void 0===e?this.nextTokensNoContext(t):this.nextTokensInContext(t,e)},o.prototype.addState=function(t){null!==t&&(t.atn=this,t.stateNumber=this.states.length),this.states.push(t)},o.prototype.removeState=function(t){this.states[t.stateNumber]=null},o.prototype.defineDecisionState=function(t){return this.decisionToState.push(t),t.decision=this.decisionToState.length-1,t.decision},o.prototype.getDecisionState=function(t){return 0===this.decisionToState.length?null:this.decisionToState[t]};var s=n(2).Token;o.prototype.getExpectedTokens=function(t,e){if(t<0||t>=this.states.length)throw"Invalid state number.";var n=this.states[t],r=this.nextTokens(n);if(!r.contains(s.EPSILON))return r;var o=new i;for(o.addSet(r),o.removeOne(s.EPSILON);null!==e&&e.invokingState>=0&&r.contains(s.EPSILON);){var a=this.states[e.invokingState].transitions[0];r=this.nextTokens(a.followState),o.addSet(r),o.removeOne(s.EPSILON),e=e.parentCtx}return r.contains(s.EPSILON)&&o.addOne(s.EOF),o},o.INVALID_ALT_NUMBER=0,e.ATN=o},function(t,e,n){var r=n(2).Token,i=(n(3).Interval,n(3).IntervalSet),o=n(12).Predicate,s=n(12).PrecedencePredicate;function a(t){if(null==t)throw"target cannot be null.";return this.target=t,this.isEpsilon=!1,this.label=null,this}function u(t,e){return a.call(this,t),this.label_=e,this.label=this.makeLabel(),this.serializationType=a.ATOM,this}function c(t,e,n,r){return a.call(this,t),this.ruleIndex=e,this.precedence=n,this.followState=r,this.serializationType=a.RULE,this.isEpsilon=!0,this}function l(t,e){return a.call(this,t),this.serializationType=a.EPSILON,this.isEpsilon=!0,this.outermostPrecedenceReturn=e,this}function p(t,e,n){return a.call(this,t),this.serializationType=a.RANGE,this.start=e,this.stop=n,this.label=this.makeLabel(),this}function h(t){return a.call(this,t),this}function f(t,e,n,r){return h.call(this,t),this.serializationType=a.PREDICATE,this.ruleIndex=e,this.predIndex=n,this.isCtxDependent=r,this.isEpsilon=!0,this}function _(t,e,n,r){return a.call(this,t),this.serializationType=a.ACTION,this.ruleIndex=e,this.actionIndex=void 0===n?-1:n,this.isCtxDependent=void 0!==r&&r,this.isEpsilon=!0,this}function d(t,e){return a.call(this,t),this.serializationType=a.SET,null!=e?this.label=e:(this.label=new i,this.label.addOne(r.INVALID_TYPE)),this}function y(t,e){return d.call(this,t,e),this.serializationType=a.NOT_SET,this}function g(t){return a.call(this,t),this.serializationType=a.WILDCARD,this}function v(t,e){return h.call(this,t),this.serializationType=a.PRECEDENCE,this.precedence=e,this.isEpsilon=!0,this}a.EPSILON=1,a.RANGE=2,a.RULE=3,a.PREDICATE=4,a.ATOM=5,a.ACTION=6,a.SET=7,a.NOT_SET=8,a.WILDCARD=9,a.PRECEDENCE=10,a.serializationNames=["INVALID","EPSILON","RANGE","RULE","PREDICATE","ATOM","ACTION","SET","NOT_SET","WILDCARD","PRECEDENCE"],a.serializationTypes={EpsilonTransition:a.EPSILON,RangeTransition:a.RANGE,RuleTransition:a.RULE,PredicateTransition:a.PREDICATE,AtomTransition:a.ATOM,ActionTransition:a.ACTION,SetTransition:a.SET,NotSetTransition:a.NOT_SET,WildcardTransition:a.WILDCARD,PrecedencePredicateTransition:a.PRECEDENCE},u.prototype=Object.create(a.prototype),u.prototype.constructor=u,u.prototype.makeLabel=function(){var t=new i;return t.addOne(this.label_),t},u.prototype.matches=function(t,e,n){return this.label_===t},u.prototype.toString=function(){return this.label_},c.prototype=Object.create(a.prototype),c.prototype.constructor=c,c.prototype.matches=function(t,e,n){return!1},l.prototype=Object.create(a.prototype),l.prototype.constructor=l,l.prototype.matches=function(t,e,n){return!1},l.prototype.toString=function(){return"epsilon"},p.prototype=Object.create(a.prototype),p.prototype.constructor=p,p.prototype.makeLabel=function(){var t=new i;return t.addRange(this.start,this.stop),t},p.prototype.matches=function(t,e,n){return t>=this.start&&t<=this.stop},p.prototype.toString=function(){return"'"+String.fromCharCode(this.start)+"'..'"+String.fromCharCode(this.stop)+"'"},h.prototype=Object.create(a.prototype),h.prototype.constructor=h,f.prototype=Object.create(h.prototype),f.prototype.constructor=f,f.prototype.matches=function(t,e,n){return!1},f.prototype.getPredicate=function(){return new o(this.ruleIndex,this.predIndex,this.isCtxDependent)},f.prototype.toString=function(){return"pred_"+this.ruleIndex+":"+this.predIndex},_.prototype=Object.create(a.prototype),_.prototype.constructor=_,_.prototype.matches=function(t,e,n){return!1},_.prototype.toString=function(){return"action_"+this.ruleIndex+":"+this.actionIndex},d.prototype=Object.create(a.prototype),d.prototype.constructor=d,d.prototype.matches=function(t,e,n){return this.label.contains(t)},d.prototype.toString=function(){return this.label.toString()},y.prototype=Object.create(d.prototype),y.prototype.constructor=y,y.prototype.matches=function(t,e,n){return t>=e&&t<=n&&!d.prototype.matches.call(this,t,e,n)},y.prototype.toString=function(){return"~"+d.prototype.toString.call(this)},g.prototype=Object.create(a.prototype),g.prototype.constructor=g,g.prototype.matches=function(t,e,n){return t>=e&&t<=n},g.prototype.toString=function(){return"."},v.prototype=Object.create(h.prototype),v.prototype.constructor=v,v.prototype.matches=function(t,e,n){return!1},v.prototype.getPredicate=function(){return new s(this.precedence)},v.prototype.toString=function(){return this.precedence+" >= _p"},e.Transition=a,e.AtomTransition=u,e.SetTransition=d,e.NotSetTransition=y,e.RuleTransition=c,e.ActionTransition=_,e.EpsilonTransition=l,e.RangeTransition=p,e.WildcardTransition=g,e.PredicateTransition=f,e.PrecedencePredicateTransition=v,e.AbstractPredicateTransition=h},function(t,e,n){var r=n(9).ATN,i=n(1),o=i.Hash,s=i.Set,a=n(12).SemanticContext,u=n(8).merge;function c(t){return t.hashCodeForConfigSet()}function l(t,e){return t===e||null!==t&&null!==e&&t.equalsForConfigSet(e)}function p(t){return this.configLookup=new s(c,l),this.fullCtx=void 0===t||t,this.readOnly=!1,this.configs=[],this.uniqueAlt=0,this.conflictingAlts=null,this.hasSemanticContext=!1,this.dipsIntoOuterContext=!1,this.cachedHashCode=-1,this}function h(){return p.call(this),this.configLookup=new s,this}p.prototype.add=function(t,e){if(void 0===e&&(e=null),this.readOnly)throw"This set is readonly";t.semanticContext!==a.NONE&&(this.hasSemanticContext=!0),t.reachesIntoOuterContext>0&&(this.dipsIntoOuterContext=!0);var n=this.configLookup.add(t);if(n===t)return this.cachedHashCode=-1,this.configs.push(t),!0;var r=!this.fullCtx,i=u(n.context,t.context,r,e);return n.reachesIntoOuterContext=Math.max(n.reachesIntoOuterContext,t.reachesIntoOuterContext),t.precedenceFilterSuppressed&&(n.precedenceFilterSuppressed=!0),n.context=i,!0},p.prototype.getStates=function(){for(var t=new s,e=0;e<this.configs.length;e++)t.add(this.configs[e].state);return t},p.prototype.getPredicates=function(){for(var t=[],e=0;e<this.configs.length;e++){var n=this.configs[e].semanticContext;n!==a.NONE&&t.push(n.semanticContext)}return t},Object.defineProperty(p.prototype,"items",{get:function(){return this.configs}}),p.prototype.optimizeConfigs=function(t){if(this.readOnly)throw"This set is readonly";if(0!==this.configLookup.length)for(var e=0;e<this.configs.length;e++){var n=this.configs[e];n.context=t.getCachedContext(n.context)}},p.prototype.addAll=function(t){for(var e=0;e<t.length;e++)this.add(t[e]);return!1},p.prototype.equals=function(t){return this===t||t instanceof p&&i.equalArrays(this.configs,t.configs)&&this.fullCtx===t.fullCtx&&this.uniqueAlt===t.uniqueAlt&&this.conflictingAlts===t.conflictingAlts&&this.hasSemanticContext===t.hasSemanticContext&&this.dipsIntoOuterContext===t.dipsIntoOuterContext},p.prototype.hashCode=function(){var t=new o;return t.update(this.configs),t.finish()},p.prototype.updateHashCode=function(t){this.readOnly?(-1===this.cachedHashCode&&(this.cachedHashCode=this.hashCode()),t.update(this.cachedHashCode)):t.update(this.hashCode())},Object.defineProperty(p.prototype,"length",{get:function(){return this.configs.length}}),p.prototype.isEmpty=function(){return 0===this.configs.length},p.prototype.contains=function(t){if(null===this.configLookup)throw"This method is not implemented for readonly sets.";return this.configLookup.contains(t)},p.prototype.containsFast=function(t){if(null===this.configLookup)throw"This method is not implemented for readonly sets.";return this.configLookup.containsFast(t)},p.prototype.clear=function(){if(this.readOnly)throw"This set is readonly";this.configs=[],this.cachedHashCode=-1,this.configLookup=new s},p.prototype.setReadonly=function(t){this.readOnly=t,t&&(this.configLookup=null)},p.prototype.toString=function(){return i.arrayToString(this.configs)+(this.hasSemanticContext?",hasSemanticContext="+this.hasSemanticContext:"")+(this.uniqueAlt!==r.INVALID_ALT_NUMBER?",uniqueAlt="+this.uniqueAlt:"")+(null!==this.conflictingAlts?",conflictingAlts="+this.conflictingAlts:"")+(this.dipsIntoOuterContext?",dipsIntoOuterContext":"")},h.prototype=Object.create(p.prototype),h.prototype.constructor=h,e.ATNConfigSet=p,e.OrderedATNConfigSet=h},function(t,e,n){var r=n(1).Set,i=n(1).Hash;function o(){return this}function s(t,e,n){return o.call(this),this.ruleIndex=void 0===t?-1:t,this.predIndex=void 0===e?-1:e,this.isCtxDependent=void 0!==n&&n,this}function a(t){o.call(this),this.precedence=void 0===t?0:t}function u(t,e){o.call(this);var n=new r;t instanceof u?t.opnds.map((function(t){n.add(t)})):n.add(t),e instanceof u?e.opnds.map((function(t){n.add(t)})):n.add(e);var i=a.filterPrecedencePredicates(n);if(i.length>0){var s=null;i.map((function(t){(null===s||t.precedence<s.precedence)&&(s=t)})),n.add(s)}return this.opnds=n.values(),this}function c(t,e){o.call(this);var n=new r;t instanceof c?t.opnds.map((function(t){n.add(t)})):n.add(t),e instanceof c?e.opnds.map((function(t){n.add(t)})):n.add(e);var i=a.filterPrecedencePredicates(n);if(i.length>0){var s=i.sort((function(t,e){return t.compareTo(e)})),u=s[s.length-1];n.add(u)}return this.opnds=n.values(),this}o.prototype.hashCode=function(){var t=new i;return this.updateHashCode(t),t.finish()},o.prototype.evaluate=function(t,e){},o.prototype.evalPrecedence=function(t,e){return this},o.andContext=function(t,e){if(null===t||t===o.NONE)return e;if(null===e||e===o.NONE)return t;var n=new u(t,e);return 1===n.opnds.length?n.opnds[0]:n},o.orContext=function(t,e){if(null===t)return e;if(null===e)return t;if(t===o.NONE||e===o.NONE)return o.NONE;var n=new c(t,e);return 1===n.opnds.length?n.opnds[0]:n},s.prototype=Object.create(o.prototype),s.prototype.constructor=s,o.NONE=new s,s.prototype.evaluate=function(t,e){var n=this.isCtxDependent?e:null;return t.sempred(n,this.ruleIndex,this.predIndex)},s.prototype.updateHashCode=function(t){t.update(this.ruleIndex,this.predIndex,this.isCtxDependent)},s.prototype.equals=function(t){return this===t||t instanceof s&&(this.ruleIndex===t.ruleIndex&&this.predIndex===t.predIndex&&this.isCtxDependent===t.isCtxDependent)},s.prototype.toString=function(){return"{"+this.ruleIndex+":"+this.predIndex+"}?"},a.prototype=Object.create(o.prototype),a.prototype.constructor=a,a.prototype.evaluate=function(t,e){return t.precpred(e,this.precedence)},a.prototype.evalPrecedence=function(t,e){return t.precpred(e,this.precedence)?o.NONE:null},a.prototype.compareTo=function(t){return this.precedence-t.precedence},a.prototype.updateHashCode=function(t){t.update(31)},a.prototype.equals=function(t){return this===t||t instanceof a&&this.precedence===t.precedence},a.prototype.toString=function(){return"{"+this.precedence+">=prec}?"},a.filterPrecedencePredicates=function(t){var e=[];return t.values().map((function(t){t instanceof a&&e.push(t)})),e},u.prototype=Object.create(o.prototype),u.prototype.constructor=u,u.prototype.equals=function(t){return this===t||t instanceof u&&this.opnds===t.opnds},u.prototype.updateHashCode=function(t){t.update(this.opnds,"AND")},u.prototype.evaluate=function(t,e){for(var n=0;n<this.opnds.length;n++)if(!this.opnds[n].evaluate(t,e))return!1;return!0},u.prototype.evalPrecedence=function(t,e){for(var n=!1,r=[],i=0;i<this.opnds.length;i++){var s=this.opnds[i],a=s.evalPrecedence(t,e);if(n|=a!==s,null===a)return null;a!==o.NONE&&r.push(a)}if(!n)return this;if(0===r.length)return o.NONE;var u=null;return r.map((function(t){u=null===u?t:o.andContext(u,t)})),u},u.prototype.toString=function(){var t="";return this.opnds.map((function(e){t+="&& "+e.toString()})),t.length>3?t.slice(3):t},c.prototype=Object.create(o.prototype),c.prototype.constructor=c,c.prototype.constructor=function(t){return this===t||t instanceof c&&this.opnds===t.opnds},c.prototype.updateHashCode=function(t){t.update(this.opnds,"OR")},c.prototype.evaluate=function(t,e){for(var n=0;n<this.opnds.length;n++)if(this.opnds[n].evaluate(t,e))return!0;return!1},c.prototype.evalPrecedence=function(t,e){for(var n=!1,r=[],i=0;i<this.opnds.length;i++){var s=this.opnds[i],a=s.evalPrecedence(t,e);if(n|=a!==s,a===o.NONE)return o.NONE;null!==a&&r.push(a)}if(!n)return this;if(0===r.length)return null;return r.map((function(t){return t})),null},c.prototype.toString=function(){var t="";return this.opnds.map((function(e){t+="|| "+e.toString()})),t.length>3?t.slice(3):t},e.SemanticContext=o,e.PrecedencePredicate=a,e.Predicate=s},function(t,e,n){var r=n(11).ATNConfigSet,i=n(1),o=i.Hash,s=i.Set;function a(t,e){return this.alt=e,this.pred=t,this}function u(t,e){return null===t&&(t=-1),null===e&&(e=new r),this.stateNumber=t,this.configs=e,this.edges=null,this.isAcceptState=!1,this.prediction=0,this.lexerActionExecutor=null,this.requiresFullContext=!1,this.predicates=null,this}a.prototype.toString=function(){return"("+this.pred+", "+this.alt+")"},u.prototype.getAltSet=function(){var t=new s;if(null!==this.configs)for(var e=0;e<this.configs.length;e++){var n=this.configs[e];t.add(n.alt)}return 0===t.length?null:t},u.prototype.equals=function(t){return this===t||t instanceof u&&this.configs.equals(t.configs)},u.prototype.toString=function(){var t=this.stateNumber+":"+this.configs;return this.isAcceptState&&(t+="=>",null!==this.predicates?t+=this.predicates:t+=this.prediction),t},u.prototype.hashCode=function(){var t=new o;return t.update(this.configs),t.finish()},e.DFAState=u,e.PredPrediction=a},function(t,e,n){e.atn=n(37),e.codepointat=n(31),e.dfa=n(44),e.fromcodepoint=n(32),e.tree=n(46),e.error=n(47),e.Token=n(2).Token,e.CharStreams=n(49).CharStreams,e.CommonToken=n(2).CommonToken,e.InputStream=n(21).InputStream,e.FileStream=n(50).FileStream,e.CommonTokenStream=n(51).CommonTokenStream,e.Lexer=n(17).Lexer,e.Parser=n(53).Parser;var r=n(8);e.PredictionContextCache=r.PredictionContextCache,e.ParserRuleContext=n(20).ParserRuleContext,e.Interval=n(3).Interval,e.Utils=n(1)},function(t,e,n){var r=n(4).DecisionState,i=n(12).SemanticContext,o=n(1).Hash;function s(t,e){if(null===t){var n={state:null,alt:null,context:null,semanticContext:null};return e&&(n.reachesIntoOuterContext=0),n}var r={};return r.state=t.state||null,r.alt=void 0===t.alt?null:t.alt,r.context=t.context||null,r.semanticContext=t.semanticContext||null,e&&(r.reachesIntoOuterContext=t.reachesIntoOuterContext||0,r.precedenceFilterSuppressed=t.precedenceFilterSuppressed||!1),r}function a(t,e){return this.checkContext(t,e),t=s(t),e=s(e,!0),this.state=null!==t.state?t.state:e.state,this.alt=null!==t.alt?t.alt:e.alt,this.context=null!==t.context?t.context:e.context,this.semanticContext=null!==t.semanticContext?t.semanticContext:null!==e.semanticContext?e.semanticContext:i.NONE,this.reachesIntoOuterContext=e.reachesIntoOuterContext,this.precedenceFilterSuppressed=e.precedenceFilterSuppressed,this}function u(t,e){a.call(this,t,e);var n=t.lexerActionExecutor||null;return this.lexerActionExecutor=n||(null!==e?e.lexerActionExecutor:null),this.passedThroughNonGreedyDecision=null!==e&&this.checkNonGreedyDecision(e,this.state),this}a.prototype.checkContext=function(t,e){null!==t.context&&void 0!==t.context||null!==e&&null!==e.context&&void 0!==e.context||(this.context=null)},a.prototype.hashCode=function(){var t=new o;return this.updateHashCode(t),t.finish()},a.prototype.updateHashCode=function(t){t.update(this.state.stateNumber,this.alt,this.context,this.semanticContext)},a.prototype.equals=function(t){return this===t||t instanceof a&&(this.state.stateNumber===t.state.stateNumber&&this.alt===t.alt&&(null===this.context?null===t.context:this.context.equals(t.context))&&this.semanticContext.equals(t.semanticContext)&&this.precedenceFilterSuppressed===t.precedenceFilterSuppressed)},a.prototype.hashCodeForConfigSet=function(){var t=new o;return t.update(this.state.stateNumber,this.alt,this.semanticContext),t.finish()},a.prototype.equalsForConfigSet=function(t){return this===t||t instanceof a&&(this.state.stateNumber===t.state.stateNumber&&this.alt===t.alt&&this.semanticContext.equals(t.semanticContext))},a.prototype.toString=function(){return"("+this.state+","+this.alt+(null!==this.context?",["+this.context.toString()+"]":"")+(this.semanticContext!==i.NONE?","+this.semanticContext.toString():"")+(this.reachesIntoOuterContext>0?",up="+this.reachesIntoOuterContext:"")+")"},u.prototype=Object.create(a.prototype),u.prototype.constructor=u,u.prototype.updateHashCode=function(t){t.update(this.state.stateNumber,this.alt,this.context,this.semanticContext,this.passedThroughNonGreedyDecision,this.lexerActionExecutor)},u.prototype.equals=function(t){return this===t||t instanceof u&&this.passedThroughNonGreedyDecision==t.passedThroughNonGreedyDecision&&(this.lexerActionExecutor?this.lexerActionExecutor.equals(t.lexerActionExecutor):!t.lexerActionExecutor)&&a.prototype.equals.call(this,t)},u.prototype.hashCodeForConfigSet=u.prototype.hashCode,u.prototype.equalsForConfigSet=u.prototype.equals,u.prototype.checkNonGreedyDecision=function(t,e){return t.passedThroughNonGreedyDecision||e instanceof r&&e.nonGreedy},e.ATNConfig=a,e.LexerATNConfig=u},function(t,e,n){var r=n(5).RuleNode,i=n(5).INVALID_INTERVAL,o=n(9).INVALID_ALT_NUMBER;function s(t,e){return r.call(this),this.parentCtx=t||null,this.invokingState=e||-1,this}s.prototype=Object.create(r.prototype),s.prototype.constructor=s,s.prototype.depth=function(){for(var t=0,e=this;null!==e;)e=e.parentCtx,t+=1;return t},s.prototype.isEmpty=function(){return-1===this.invokingState},s.prototype.getSourceInterval=function(){return i},s.prototype.getRuleContext=function(){return this},s.prototype.getPayload=function(){return this},s.prototype.getText=function(){return 0===this.getChildCount()?"":this.children.map((function(t){return t.getText()})).join("")},s.prototype.getAltNumber=function(){return o},s.prototype.setAltNumber=function(t){},s.prototype.getChild=function(t){return null},s.prototype.getChildCount=function(){return 0},s.prototype.accept=function(t){return t.visitChildren(this)},e.RuleContext=s;var a=n(24).Trees;s.prototype.toStringTree=function(t,e){return a.toStringTree(this,t,e)},s.prototype.toString=function(t,e){t=t||null,e=e||null;for(var n=this,r="[";null!==n&&n!==e;){if(null===t)n.isEmpty()||(r+=n.invokingState);else{var i=n.ruleIndex;r+=i>=0&&i<t.length?t[i]:""+i}null===n.parentCtx||null===t&&n.parentCtx.isEmpty()||(r+=" "),n=n.parentCtx}return r+="]"}},function(t,e,n){var r=n(2).Token,i=n(28).Recognizer,o=n(41).CommonTokenFactory,s=n(6).RecognitionException,a=n(6).LexerNoViableAltException;function u(t){return i.call(this),this._input=t,this._factory=o.DEFAULT,this._tokenFactorySourcePair=[this,t],this._interp=null,this._token=null,this._tokenStartCharIndex=-1,this._tokenStartLine=-1,this._tokenStartColumn=-1,this._hitEOF=!1,this._channel=r.DEFAULT_CHANNEL,this._type=r.INVALID_TYPE,this._modeStack=[],this._mode=u.DEFAULT_MODE,this._text=null,this}u.prototype=Object.create(i.prototype),u.prototype.constructor=u,u.DEFAULT_MODE=0,u.MORE=-2,u.SKIP=-3,u.DEFAULT_TOKEN_CHANNEL=r.DEFAULT_CHANNEL,u.HIDDEN=r.HIDDEN_CHANNEL,u.MIN_CHAR_VALUE=0,u.MAX_CHAR_VALUE=1114111,u.prototype.reset=function(){null!==this._input&&this._input.seek(0),this._token=null,this._type=r.INVALID_TYPE,this._channel=r.DEFAULT_CHANNEL,this._tokenStartCharIndex=-1,this._tokenStartColumn=-1,this._tokenStartLine=-1,this._text=null,this._hitEOF=!1,this._mode=u.DEFAULT_MODE,this._modeStack=[],this._interp.reset()},u.prototype.nextToken=function(){if(null===this._input)throw"nextToken requires a non-null input stream.";var t=this._input.mark();try{for(;;){if(this._hitEOF)return this.emitEOF(),this._token;this._token=null,this._channel=r.DEFAULT_CHANNEL,this._tokenStartCharIndex=this._input.index,this._tokenStartColumn=this._interp.column,this._tokenStartLine=this._interp.line,this._text=null;for(var e=!1;;){this._type=r.INVALID_TYPE;var n=u.SKIP;try{n=this._interp.match(this._input,this._mode)}catch(t){if(!(t instanceof s))throw console.log(t.stack),t;this.notifyListeners(t),this.recover(t)}if(this._input.LA(1)===r.EOF&&(this._hitEOF=!0),this._type===r.INVALID_TYPE&&(this._type=n),this._type===u.SKIP){e=!0;break}if(this._type!==u.MORE)break}if(!e)return null===this._token&&this.emit(),this._token}}finally{this._input.release(t)}},u.prototype.skip=function(){this._type=u.SKIP},u.prototype.more=function(){this._type=u.MORE},u.prototype.mode=function(t){this._mode=t},u.prototype.pushMode=function(t){this._interp.debug&&console.log("pushMode "+t),this._modeStack.push(this._mode),this.mode(t)},u.prototype.popMode=function(){if(0===this._modeStack.length)throw"Empty Stack";return this._interp.debug&&console.log("popMode back to "+this._modeStack.slice(0,-1)),this.mode(this._modeStack.pop()),this._mode},Object.defineProperty(u.prototype,"inputStream",{get:function(){return this._input},set:function(t){this._input=null,this._tokenFactorySourcePair=[this,this._input],this.reset(),this._input=t,this._tokenFactorySourcePair=[this,this._input]}}),Object.defineProperty(u.prototype,"sourceName",{get:function(){return this._input.sourceName}}),u.prototype.emitToken=function(t){this._token=t},u.prototype.emit=function(){var t=this._factory.create(this._tokenFactorySourcePair,this._type,this._text,this._channel,this._tokenStartCharIndex,this.getCharIndex()-1,this._tokenStartLine,this._tokenStartColumn);return this.emitToken(t),t},u.prototype.emitEOF=function(){var t=this.column,e=this.line,n=this._factory.create(this._tokenFactorySourcePair,r.EOF,null,r.DEFAULT_CHANNEL,this._input.index,this._input.index-1,e,t);return this.emitToken(n),n},Object.defineProperty(u.prototype,"type",{get:function(){return this.type},set:function(t){this._type=t}}),Object.defineProperty(u.prototype,"line",{get:function(){return this._interp.line},set:function(t){this._interp.line=t}}),Object.defineProperty(u.prototype,"column",{get:function(){return this._interp.column},set:function(t){this._interp.column=t}}),u.prototype.getCharIndex=function(){return this._input.index},Object.defineProperty(u.prototype,"text",{get:function(){return null!==this._text?this._text:this._interp.getText(this._input)},set:function(t){this._text=t}}),u.prototype.getAllTokens=function(){for(var t=[],e=this.nextToken();e.type!==r.EOF;)t.push(e),e=this.nextToken();return t},u.prototype.notifyListeners=function(t){var e=this._tokenStartCharIndex,n=this._input.index,r=this._input.getText(e,n),i="token recognition error at: '"+this.getErrorDisplay(r)+"'";this.getErrorListenerDispatch().syntaxError(this,null,this._tokenStartLine,this._tokenStartColumn,i,t)},u.prototype.getErrorDisplay=function(t){for(var e=[],n=0;n<t.length;n++)e.push(t[n]);return e.join("")},u.prototype.getErrorDisplayForChar=function(t){return t.charCodeAt(0)===r.EOF?"<EOF>":"\n"===t?"\\n":"\t"===t?"\\t":"\r"===t?"\\r":t},u.prototype.getCharErrorDisplay=function(t){return"'"+this.getErrorDisplayForChar(t)+"'"},u.prototype.recover=function(t){this._input.LA(1)!==r.EOF&&(t instanceof a?this._interp.consume(this._input):this._input.consume())},e.Lexer=u},function(t,e){function n(){return this}function r(){return n.call(this),this}function i(t){if(n.call(this),null===t)throw"delegates";return this.delegates=t,this}n.prototype.syntaxError=function(t,e,n,r,i,o){},n.prototype.reportAmbiguity=function(t,e,n,r,i,o,s){},n.prototype.reportAttemptingFullContext=function(t,e,n,r,i,o){},n.prototype.reportContextSensitivity=function(t,e,n,r,i,o){},r.prototype=Object.create(n.prototype),r.prototype.constructor=r,r.INSTANCE=new r,r.prototype.syntaxError=function(t,e,n,r,i,o){console.error("line "+n+":"+r+" "+i)},i.prototype=Object.create(n.prototype),i.prototype.constructor=i,i.prototype.syntaxError=function(t,e,n,r,i,o){this.delegates.map((function(s){s.syntaxError(t,e,n,r,i,o)}))},i.prototype.reportAmbiguity=function(t,e,n,r,i,o,s){this.delegates.map((function(a){a.reportAmbiguity(t,e,n,r,i,o,s)}))},i.prototype.reportAttemptingFullContext=function(t,e,n,r,i,o){this.delegates.map((function(s){s.reportAttemptingFullContext(t,e,n,r,i,o)}))},i.prototype.reportContextSensitivity=function(t,e,n,r,i,o){this.delegates.map((function(s){s.reportContextSensitivity(t,e,n,r,i,o)}))},e.ErrorListener=n,e.ConsoleErrorListener=r,e.ProxyErrorListener=i},function(t,e){function n(t,e,n){return this.dfa=t,this.literalNames=e||[],this.symbolicNames=n||[],this}function r(t){return n.call(this,t,null),this}n.prototype.toString=function(){if(null===this.dfa.s0)return null;for(var t="",e=this.dfa.sortedStates(),n=0;n<e.length;n++){var r=e[n];if(null!==r.edges)for(var i=r.edges.length,o=0;o<i;o++){var s=r.edges[o]||null;null!==s&&2147483647!==s.stateNumber&&(t=(t=(t=(t=(t=(t=t.concat(this.getStateString(r))).concat("-")).concat(this.getEdgeLabel(o))).concat("->")).concat(this.getStateString(s))).concat("\n"))}}return 0===t.length?null:t},n.prototype.getEdgeLabel=function(t){return 0===t?"EOF":null!==this.literalNames||null!==this.symbolicNames?this.literalNames[t-1]||this.symbolicNames[t-1]:String.fromCharCode(t-1)},n.prototype.getStateString=function(t){var e=(t.isAcceptState?":":"")+"s"+t.stateNumber+(t.requiresFullContext?"^":"");return t.isAcceptState?null!==t.predicates?e+"=>"+t.predicates.toString():e+"=>"+t.prediction.toString():e},r.prototype=Object.create(n.prototype),r.prototype.constructor=r,r.prototype.getEdgeLabel=function(t){return"'"+String.fromCharCode(t)+"'"},e.DFASerializer=n,e.LexerDFASerializer=r},function(t,e,n){var r=n(16).RuleContext,i=n(5),o=i.INVALID_INTERVAL,s=i.TerminalNode,a=i.TerminalNodeImpl,u=i.ErrorNodeImpl,c=n(3).Interval;function l(t,e){t=t||null,e=e||null,r.call(this,t,e),this.ruleIndex=-1,this.children=null,this.start=null,this.stop=null,this.exception=null}function p(t,e,n){return l.call(t,e),this.ruleIndex=n,this}l.prototype=Object.create(r.prototype),l.prototype.constructor=l,l.prototype.copyFrom=function(t){this.parentCtx=t.parentCtx,this.invokingState=t.invokingState,this.children=null,this.start=t.start,this.stop=t.stop,t.children&&(this.children=[],t.children.map((function(t){t instanceof u&&(this.children.push(t),t.parentCtx=this)}),this))},l.prototype.enterRule=function(t){},l.prototype.exitRule=function(t){},l.prototype.addChild=function(t){return null===this.children&&(this.children=[]),this.children.push(t),t},l.prototype.removeLastChild=function(){null!==this.children&&this.children.pop()},l.prototype.addTokenNode=function(t){var e=new a(t);return this.addChild(e),e.parentCtx=this,e},l.prototype.addErrorNode=function(t){var e=new u(t);return this.addChild(e),e.parentCtx=this,e},l.prototype.getChild=function(t,e){if(e=e||null,null===this.children||t<0||t>=this.children.length)return null;if(null===e)return this.children[t];for(var n=0;n<this.children.length;n++){var r=this.children[n];if(r instanceof e){if(0===t)return r;t-=1}}return null},l.prototype.getToken=function(t,e){if(null===this.children||e<0||e>=this.children.length)return null;for(var n=0;n<this.children.length;n++){var r=this.children[n];if(r instanceof s&&r.symbol.type===t){if(0===e)return r;e-=1}}return null},l.prototype.getTokens=function(t){if(null===this.children)return[];for(var e=[],n=0;n<this.children.length;n++){var r=this.children[n];r instanceof s&&r.symbol.type===t&&e.push(r)}return e},l.prototype.getTypedRuleContext=function(t,e){return this.getChild(e,t)},l.prototype.getTypedRuleContexts=function(t){if(null===this.children)return[];for(var e=[],n=0;n<this.children.length;n++){var r=this.children[n];r instanceof t&&e.push(r)}return e},l.prototype.getChildCount=function(){return null===this.children?0:this.children.length},l.prototype.getSourceInterval=function(){return null===this.start||null===this.stop?o:new c(this.start.tokenIndex,this.stop.tokenIndex)},r.EMPTY=new l,p.prototype=Object.create(l.prototype),p.prototype.constructor=p,e.ParserRuleContext=l},function(t,e,n){var r=n(2).Token;function i(t,e){return this.name="<empty>",this.strdata=t,this.decodeToUnicodeCodePoints=e||!1,function(t){if(t._index=0,t.data=[],t.decodeToUnicodeCodePoints)for(var e=0;e<t.strdata.length;){var n=t.strdata.codePointAt(e);t.data.push(n),e+=n<=65535?1:2}else for(e=0;e<t.strdata.length;e++){var r=t.strdata.charCodeAt(e);t.data.push(r)}t._size=t.data.length}(this),this}n(31),n(32),Object.defineProperty(i.prototype,"index",{get:function(){return this._index}}),Object.defineProperty(i.prototype,"size",{get:function(){return this._size}}),i.prototype.reset=function(){this._index=0},i.prototype.consume=function(){if(this._index>=this._size)throw"cannot consume EOF";this._index+=1},i.prototype.LA=function(t){if(0===t)return 0;t<0&&(t+=1);var e=this._index+t-1;return e<0||e>=this._size?r.EOF:this.data[e]},i.prototype.LT=function(t){return this.LA(t)},i.prototype.mark=function(){return-1},i.prototype.release=function(t){},i.prototype.seek=function(t){t<=this._index?this._index=t:this._index=Math.min(t,this._size)},i.prototype.getText=function(t,e){if(e>=this._size&&(e=this._size-1),t>=this._size)return"";if(this.decodeToUnicodeCodePoints){for(var n="",r=t;r<=e;r++)n+=String.fromCodePoint(this.data[r]);return n}return this.strdata.slice(t,e+1)},i.prototype.toString=function(){return this.strdata},e.InputStream=i},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(0),i=(n(7),Object(r.c)("Kekuria",[r.p],{__module__:"sifaru_yusin.Kekuria",get __init__(){return Object(r.d)(this,(function(t,e){t.generated_words=[],t.references=[],t.rule_definitions=e}))},get get_reference(){return Object(r.d)(this,(function(t,e,n){return Object(r.k)((function(t){return t[0]==e}),t.references)[n][1]}))},get get_rule(){return Object(r.d)(this,(function(t,e){return t.rule_definitions.definitions[e]}))},get kekure(){return Object(r.d)(this,(function(t,e){return t.rule_definitions.kekure(e,t)}))},get push_reference(){return Object(r.d)(this,(function(t,e,n){t.references.append(Object(r.s)([e,n]))}))}}))},function(t,e,n){"use strict";n(0)},function(t,e,n){var r=n(1),i=n(2).Token,o=(n(5).RuleNode,n(5).ErrorNode),s=n(5).TerminalNode,a=n(20).ParserRuleContext,u=n(16).RuleContext,c=n(9).INVALID_ALT_NUMBER;function l(){}l.toStringTree=function(t,e,n){e=e||null,null!==(n=n||null)&&(e=n.ruleNames);var i=l.getNodeText(t,e);i=r.escapeWhitespace(i,!1);var o=t.getChildCount();if(0===o)return i;var s="("+i+" ";o>0&&(i=l.toStringTree(t.getChild(0),e),s=s.concat(i));for(var a=1;a<o;a++)i=l.toStringTree(t.getChild(a),e),s=s.concat(" "+i);return s=s.concat(")")},l.getNodeText=function(t,e,n){if(e=e||null,null!==(n=n||null)&&(e=n.ruleNames),null!==e){if(t instanceof u){var r=t.getAltNumber();return r!=c?e[t.ruleIndex]+":"+r:e[t.ruleIndex]}if(t instanceof o)return t.toString();if(t instanceof s&&null!==t.symbol)return t.symbol.text}var a=t.getPayload();return a instanceof i?a.text:t.getPayload().toString()},l.getChildren=function(t){for(var e=[],n=0;n<t.getChildCount();n++)e.push(t.getChild(n));return e},l.getAncestors=function(t){var e=[];for(t=t.getParent();null!==t;)e=[t].concat(e),t=t.getParent();return e},l.findAllTokenNodes=function(t,e){return l.findAllNodes(t,e,!0)},l.findAllRuleNodes=function(t,e){return l.findAllNodes(t,e,!1)},l.findAllNodes=function(t,e,n){var r=[];return l._findAllNodes(t,e,n,r),r},l._findAllNodes=function(t,e,n,r){n&&t instanceof s?t.symbol.type===e&&r.push(t):!n&&t instanceof a&&t.ruleIndex===e&&r.push(t);for(var i=0;i<t.getChildCount();i++)l._findAllNodes(t.getChild(i),e,n,r)},l.descendants=function(t){for(var e=[t],n=0;n<t.getChildCount();n++)e=e.concat(l.descendants(t.getChild(n)));return e},e.Trees=l},function(t,e,n){var r=n(2).Token,i=n(9).ATN,o=n(39).ATNType,s=n(4),a=s.ATNState,u=s.BasicState,c=s.DecisionState,l=s.BlockStartState,p=s.BlockEndState,h=s.LoopEndState,f=s.RuleStartState,_=s.RuleStopState,d=s.TokensStartState,y=s.PlusLoopbackState,g=s.StarLoopbackState,v=s.StarLoopEntryState,m=s.PlusBlockStartState,x=s.StarBlockStartState,T=s.BasicBlockStartState,E=n(10),S=E.Transition,O=E.AtomTransition,C=E.SetTransition,A=E.NotSetTransition,b=E.RuleTransition,R=E.RangeTransition,P=E.ActionTransition,k=E.EpsilonTransition,N=E.WildcardTransition,L=E.PredicateTransition,I=E.PrecedencePredicateTransition,D=n(3).IntervalSet,w=(n(3).Interval,n(26).ATNDeserializationOptions),M=n(27),j=M.LexerActionType,F=M.LexerSkipAction,U=M.LexerChannelAction,W=M.LexerCustomAction,B=M.LexerMoreAction,K=M.LexerTypeAction,H=M.LexerPushModeAction,V=M.LexerPopModeAction,q=M.LexerModeAction,z="59627784-3BE5-417A-B9EB-8131A7286089",Y=["AADB8D7E-AEEF-4415-AD2B-8204D6CF042E",z];function G(t,e){var n=[];return n[t-1]=e,n.map((function(t){return e}))}function $(t){return null==t&&(t=w.defaultOptions),this.deserializationOptions=t,this.stateFactories=null,this.actionFactories=null,this}$.prototype.isFeatureSupported=function(t,e){var n=Y.indexOf(t);return!(n<0)&&Y.indexOf(e)>=n},$.prototype.deserialize=function(t){this.reset(t),this.checkVersion(),this.checkUUID();var e=this.readATN();this.readStates(e),this.readRules(e),this.readModes(e);var n=[];return this.readSets(e,n,this.readInt.bind(this)),this.isFeatureSupported(z,this.uuid)&&this.readSets(e,n,this.readInt32.bind(this)),this.readEdges(e,n),this.readDecisions(e),this.readLexerActions(e),this.markPrecedenceDecisions(e),this.verifyATN(e),this.deserializationOptions.generateRuleBypassTransitions&&e.grammarType===o.PARSER&&(this.generateRuleBypassTransitions(e),this.verifyATN(e)),e},$.prototype.reset=function(t){var e=t.split("").map((function(t){var e=t.charCodeAt(0);return e>1?e-2:e+65534}));e[0]=t.charCodeAt(0),this.data=e,this.pos=0},$.prototype.checkVersion=function(){var t=this.readInt();if(3!==t)throw"Could not deserialize ATN with version "+t+" (expected 3)."},$.prototype.checkUUID=function(){var t=this.readUUID();if(Y.indexOf(t)<0)throw"59627784-3BE5-417A-B9EB-8131A7286089";this.uuid=t},$.prototype.readATN=function(){var t=this.readInt(),e=this.readInt();return new i(t,e)},$.prototype.readStates=function(t){for(var e,n,r,i=[],o=[],s=this.readInt(),u=0;u<s;u++){var c=this.readInt();if(c!==a.INVALID_TYPE){var p=this.readInt();65535===p&&(p=-1);var h=this.stateFactory(c,p);if(c===a.LOOP_END){var f=this.readInt();i.push([h,f])}else if(h instanceof l){var _=this.readInt();o.push([h,_])}t.addState(h)}else t.addState(null)}for(e=0;e<i.length;e++)(n=i[e])[0].loopBackState=t.states[n[1]];for(e=0;e<o.length;e++)(n=o[e])[0].endState=t.states[n[1]];var d=this.readInt();for(e=0;e<d;e++)r=this.readInt(),t.states[r].nonGreedy=!0;var y=this.readInt();for(e=0;e<y;e++)r=this.readInt(),t.states[r].isPrecedenceRule=!0},$.prototype.readRules=function(t){var e,n=this.readInt();for(t.grammarType===o.LEXER&&(t.ruleToTokenType=G(n,0)),t.ruleToStartState=G(n,0),e=0;e<n;e++){var i=this.readInt(),s=t.states[i];if(t.ruleToStartState[e]=s,t.grammarType===o.LEXER){var a=this.readInt();65535===a&&(a=r.EOF),t.ruleToTokenType[e]=a}}for(t.ruleToStopState=G(n,0),e=0;e<t.states.length;e++){var u=t.states[e];u instanceof _&&(t.ruleToStopState[u.ruleIndex]=u,t.ruleToStartState[u.ruleIndex].stopState=u)}},$.prototype.readModes=function(t){for(var e=this.readInt(),n=0;n<e;n++){var r=this.readInt();t.modeToStartState.push(t.states[r])}},$.prototype.readSets=function(t,e,n){for(var r=this.readInt(),i=0;i<r;i++){var o=new D;e.push(o);var s=this.readInt();0!==this.readInt()&&o.addOne(-1);for(var a=0;a<s;a++){var u=n(),c=n();o.addRange(u,c)}}},$.prototype.readEdges=function(t,e){var n,r,i,o,s,a=this.readInt();for(n=0;n<a;n++){var u=this.readInt(),c=this.readInt(),p=this.readInt(),h=this.readInt(),f=this.readInt(),_=this.readInt();o=this.edgeFactory(t,p,u,c,h,f,_,e),t.states[u].addTransition(o)}for(n=0;n<t.states.length;n++)for(i=t.states[n],r=0;r<i.transitions.length;r++){var d=i.transitions[r];if(d instanceof b){var x=-1;t.ruleToStartState[d.target.ruleIndex].isPrecedenceRule&&0===d.precedence&&(x=d.target.ruleIndex),o=new k(d.followState,x),t.ruleToStopState[d.target.ruleIndex].addTransition(o)}}for(n=0;n<t.states.length;n++){if((i=t.states[n])instanceof l){if(null===i.endState)throw"IllegalState";if(null!==i.endState.startState)throw"IllegalState";i.endState.startState=i}if(i instanceof y)for(r=0;r<i.transitions.length;r++)(s=i.transitions[r].target)instanceof m&&(s.loopBackState=i);else if(i instanceof g)for(r=0;r<i.transitions.length;r++)(s=i.transitions[r].target)instanceof v&&(s.loopBackState=i)}},$.prototype.readDecisions=function(t){for(var e=this.readInt(),n=0;n<e;n++){var r=this.readInt(),i=t.states[r];t.decisionToState.push(i),i.decision=n}},$.prototype.readLexerActions=function(t){if(t.grammarType===o.LEXER){var e=this.readInt();t.lexerActions=G(e,null);for(var n=0;n<e;n++){var r=this.readInt(),i=this.readInt();65535===i&&(i=-1);var s=this.readInt();65535===s&&(s=-1);var a=this.lexerActionFactory(r,i,s);t.lexerActions[n]=a}}},$.prototype.generateRuleBypassTransitions=function(t){var e,n=t.ruleToStartState.length;for(e=0;e<n;e++)t.ruleToTokenType[e]=t.maxTokenType+e+1;for(e=0;e<n;e++)this.generateRuleBypassTransition(t,e)},$.prototype.generateRuleBypassTransition=function(t,e){var n,r,i=new T;i.ruleIndex=e,t.addState(i);var o=new p;o.ruleIndex=e,t.addState(o),i.endState=o,t.defineDecisionState(i),o.startState=i;var s=null,a=null;if(t.ruleToStartState[e].isPrecedenceRule){for(a=null,n=0;n<t.states.length;n++)if(r=t.states[n],this.stateIsEndStateFor(r,e)){a=r,s=r.loopBackState.transitions[0];break}if(null===s)throw"Couldn't identify final state of the precedence rule prefix section."}else a=t.ruleToStopState[e];for(n=0;n<t.states.length;n++){r=t.states[n];for(var c=0;c<r.transitions.length;c++){var l=r.transitions[c];l!==s&&(l.target===a&&(l.target=o))}}for(var h=t.ruleToStartState[e],f=h.transitions.length;f>0;)i.addTransition(h.transitions[f-1]),h.transitions=h.transitions.slice(-1);t.ruleToStartState[e].addTransition(new k(i)),o.addTransition(new k(a));var _=new u;t.addState(_),_.addTransition(new O(o,t.ruleToTokenType[e])),i.addTransition(new k(_))},$.prototype.stateIsEndStateFor=function(t,e){if(t.ruleIndex!==e)return null;if(!(t instanceof v))return null;var n=t.transitions[t.transitions.length-1].target;return n instanceof h&&n.epsilonOnlyTransitions&&n.transitions[0].target instanceof _?t:null},$.prototype.markPrecedenceDecisions=function(t){for(var e=0;e<t.states.length;e++){var n=t.states[e];if(n instanceof v&&t.ruleToStartState[n.ruleIndex].isPrecedenceRule){var r=n.transitions[n.transitions.length-1].target;r instanceof h&&r.epsilonOnlyTransitions&&r.transitions[0].target instanceof _&&(n.isPrecedenceDecision=!0)}}},$.prototype.verifyATN=function(t){if(this.deserializationOptions.verifyATN)for(var e=0;e<t.states.length;e++){var n=t.states[e];if(null!==n)if(this.checkCondition(n.epsilonOnlyTransitions||n.transitions.length<=1),n instanceof m)this.checkCondition(null!==n.loopBackState);else if(n instanceof v)if(this.checkCondition(null!==n.loopBackState),this.checkCondition(2===n.transitions.length),n.transitions[0].target instanceof x)this.checkCondition(n.transitions[1].target instanceof h),this.checkCondition(!n.nonGreedy);else{if(!(n.transitions[0].target instanceof h))throw"IllegalState";this.checkCondition(n.transitions[1].target instanceof x),this.checkCondition(n.nonGreedy)}else n instanceof g?(this.checkCondition(1===n.transitions.length),this.checkCondition(n.transitions[0].target instanceof v)):n instanceof h?this.checkCondition(null!==n.loopBackState):n instanceof f?this.checkCondition(null!==n.stopState):n instanceof l?this.checkCondition(null!==n.endState):n instanceof p?this.checkCondition(null!==n.startState):n instanceof c?this.checkCondition(n.transitions.length<=1||n.decision>=0):this.checkCondition(n.transitions.length<=1||n instanceof _)}},$.prototype.checkCondition=function(t,e){if(!t)throw null==e&&(e="IllegalState"),e},$.prototype.readInt=function(){return this.data[this.pos++]},$.prototype.readInt32=function(){return this.readInt()|this.readInt()<<16},$.prototype.readLong=function(){return 4294967295&this.readInt32()|this.readInt32()<<32};var X=function(){for(var t=[],e=0;e<256;e++)t[e]=(e+256).toString(16).substr(1).toUpperCase();return t}();$.prototype.readUUID=function(){for(var t=[],e=7;e>=0;e--){var n=this.readInt();t[2*e+1]=255&n,t[2*e]=n>>8&255}return X[t[0]]+X[t[1]]+X[t[2]]+X[t[3]]+"-"+X[t[4]]+X[t[5]]+"-"+X[t[6]]+X[t[7]]+"-"+X[t[8]]+X[t[9]]+"-"+X[t[10]]+X[t[11]]+X[t[12]]+X[t[13]]+X[t[14]]+X[t[15]]},$.prototype.edgeFactory=function(t,e,n,i,o,s,a,u){var c=t.states[i];switch(e){case S.EPSILON:return new k(c);case S.RANGE:return new R(c,0!==a?r.EOF:o,s);case S.RULE:return new b(t.states[o],s,a,c);case S.PREDICATE:return new L(c,o,s,0!==a);case S.PRECEDENCE:return new I(c,o);case S.ATOM:return new O(c,0!==a?r.EOF:o);case S.ACTION:return new P(c,o,s,0!==a);case S.SET:return new C(c,u[o]);case S.NOT_SET:return new A(c,u[o]);case S.WILDCARD:return new N(c);default:throw"The specified transition type: "+e+" is not valid."}},$.prototype.stateFactory=function(t,e){if(null===this.stateFactories){var n=[];n[a.INVALID_TYPE]=null,n[a.BASIC]=function(){return new u},n[a.RULE_START]=function(){return new f},n[a.BLOCK_START]=function(){return new T},n[a.PLUS_BLOCK_START]=function(){return new m},n[a.STAR_BLOCK_START]=function(){return new x},n[a.TOKEN_START]=function(){return new d},n[a.RULE_STOP]=function(){return new _},n[a.BLOCK_END]=function(){return new p},n[a.STAR_LOOP_BACK]=function(){return new g},n[a.STAR_LOOP_ENTRY]=function(){return new v},n[a.PLUS_LOOP_BACK]=function(){return new y},n[a.LOOP_END]=function(){return new h},this.stateFactories=n}if(t>this.stateFactories.length||null===this.stateFactories[t])throw"The specified state type "+t+" is not valid.";var r=this.stateFactories[t]();if(null!==r)return r.ruleIndex=e,r},$.prototype.lexerActionFactory=function(t,e,n){if(null===this.actionFactories){var r=[];r[j.CHANNEL]=function(t,e){return new U(t)},r[j.CUSTOM]=function(t,e){return new W(t,e)},r[j.MODE]=function(t,e){return new q(t)},r[j.MORE]=function(t,e){return B.INSTANCE},r[j.POP_MODE]=function(t,e){return V.INSTANCE},r[j.PUSH_MODE]=function(t,e){return new H(t)},r[j.SKIP]=function(t,e){return F.INSTANCE},r[j.TYPE]=function(t,e){return new K(t)},this.actionFactories=r}if(t>this.actionFactories.length||null===this.actionFactories[t])throw"The specified lexer action type "+t+" is not valid.";return this.actionFactories[t](e,n)},e.ATNDeserializer=$},function(t,e){function n(t){return void 0===t&&(t=null),this.readOnly=!1,this.verifyATN=null===t||t.verifyATN,this.generateRuleBypassTransitions=null!==t&&t.generateRuleBypassTransitions,this}n.defaultOptions=new n,n.defaultOptions.readOnly=!0,e.ATNDeserializationOptions=n},function(t,e){function n(){}function r(t){return this.actionType=t,this.isPositionDependent=!1,this}function i(){return r.call(this,n.SKIP),this}function o(t){return r.call(this,n.TYPE),this.type=t,this}function s(t){return r.call(this,n.PUSH_MODE),this.mode=t,this}function a(){return r.call(this,n.POP_MODE),this}function u(){return r.call(this,n.MORE),this}function c(t){return r.call(this,n.MODE),this.mode=t,this}function l(t,e){return r.call(this,n.CUSTOM),this.ruleIndex=t,this.actionIndex=e,this.isPositionDependent=!0,this}function p(t){return r.call(this,n.CHANNEL),this.channel=t,this}function h(t,e){return r.call(this,e.actionType),this.offset=t,this.action=e,this.isPositionDependent=!0,this}n.CHANNEL=0,n.CUSTOM=1,n.MODE=2,n.MORE=3,n.POP_MODE=4,n.PUSH_MODE=5,n.SKIP=6,n.TYPE=7,r.prototype.hashCode=function(){var t=new Hash;return this.updateHashCode(t),t.finish()},r.prototype.updateHashCode=function(t){t.update(this.actionType)},r.prototype.equals=function(t){return this===t},i.prototype=Object.create(r.prototype),i.prototype.constructor=i,i.INSTANCE=new i,i.prototype.execute=function(t){t.skip()},i.prototype.toString=function(){return"skip"},o.prototype=Object.create(r.prototype),o.prototype.constructor=o,o.prototype.execute=function(t){t.type=this.type},o.prototype.updateHashCode=function(t){t.update(this.actionType,this.type)},o.prototype.equals=function(t){return this===t||t instanceof o&&this.type===t.type},o.prototype.toString=function(){return"type("+this.type+")"},s.prototype=Object.create(r.prototype),s.prototype.constructor=s,s.prototype.execute=function(t){t.pushMode(this.mode)},s.prototype.updateHashCode=function(t){t.update(this.actionType,this.mode)},s.prototype.equals=function(t){return this===t||t instanceof s&&this.mode===t.mode},s.prototype.toString=function(){return"pushMode("+this.mode+")"},a.prototype=Object.create(r.prototype),a.prototype.constructor=a,a.INSTANCE=new a,a.prototype.execute=function(t){t.popMode()},a.prototype.toString=function(){return"popMode"},u.prototype=Object.create(r.prototype),u.prototype.constructor=u,u.INSTANCE=new u,u.prototype.execute=function(t){t.more()},u.prototype.toString=function(){return"more"},c.prototype=Object.create(r.prototype),c.prototype.constructor=c,c.prototype.execute=function(t){t.mode(this.mode)},c.prototype.updateHashCode=function(t){t.update(this.actionType,this.mode)},c.prototype.equals=function(t){return this===t||t instanceof c&&this.mode===t.mode},c.prototype.toString=function(){return"mode("+this.mode+")"},l.prototype=Object.create(r.prototype),l.prototype.constructor=l,l.prototype.execute=function(t){t.action(null,this.ruleIndex,this.actionIndex)},l.prototype.updateHashCode=function(t){t.update(this.actionType,this.ruleIndex,this.actionIndex)},l.prototype.equals=function(t){return this===t||t instanceof l&&(this.ruleIndex===t.ruleIndex&&this.actionIndex===t.actionIndex)},p.prototype=Object.create(r.prototype),p.prototype.constructor=p,p.prototype.execute=function(t){t._channel=this.channel},p.prototype.updateHashCode=function(t){t.update(this.actionType,this.channel)},p.prototype.equals=function(t){return this===t||t instanceof p&&this.channel===t.channel},p.prototype.toString=function(){return"channel("+this.channel+")"},h.prototype=Object.create(r.prototype),h.prototype.constructor=h,h.prototype.execute=function(t){this.action.execute(t)},h.prototype.updateHashCode=function(t){t.update(this.actionType,this.offset,this.action)},h.prototype.equals=function(t){return this===t||t instanceof h&&(this.offset===t.offset&&this.action===t.action)},e.LexerActionType=n,e.LexerSkipAction=i,e.LexerChannelAction=p,e.LexerCustomAction=l,e.LexerIndexedCustomAction=h,e.LexerMoreAction=u,e.LexerTypeAction=o,e.LexerPushModeAction=s,e.LexerPopModeAction=a,e.LexerModeAction=c},function(t,e,n){var r=n(2).Token,i=n(18).ConsoleErrorListener,o=n(18).ProxyErrorListener;function s(){return this._listeners=[i.INSTANCE],this._interp=null,this._stateNumber=-1,this}s.tokenTypeMapCache={},s.ruleIndexMapCache={},s.prototype.checkVersion=function(t){"4.8"!==t&&console.log("ANTLR runtime and generated code versions disagree: 4.8!="+t)},s.prototype.addErrorListener=function(t){this._listeners.push(t)},s.prototype.removeErrorListeners=function(){this._listeners=[]},s.prototype.getTokenTypeMap=function(){var t=this.getTokenNames();if(null===t)throw"The current recognizer does not provide a list of token names.";var e=this.tokenTypeMapCache[t];return void 0===e&&((e=t.reduce((function(t,e,n){t[e]=n}))).EOF=r.EOF,this.tokenTypeMapCache[t]=e),e},s.prototype.getRuleIndexMap=function(){var t=this.ruleNames;if(null===t)throw"The current recognizer does not provide a list of rule names.";var e=this.ruleIndexMapCache[t];return void 0===e&&(e=t.reduce((function(t,e,n){t[e]=n})),this.ruleIndexMapCache[t]=e),e},s.prototype.getTokenType=function(t){var e=this.getTokenTypeMap()[t];return void 0!==e?e:r.INVALID_TYPE},s.prototype.getErrorHeader=function(t){return"line "+t.getOffendingToken().line+":"+t.getOffendingToken().column},s.prototype.getTokenErrorDisplay=function(t){if(null===t)return"<no token>";var e=t.text;return null===e&&(e=t.type===r.EOF?"<EOF>":"<"+t.type+">"),"'"+(e=e.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t"))+"'"},s.prototype.getErrorListenerDispatch=function(){return new o(this._listeners)},s.prototype.sempred=function(t,e,n){return!0},s.prototype.precpred=function(t,e){return!0},Object.defineProperty(s.prototype,"state",{get:function(){return this._stateNumber},set:function(t){this._stateNumber=t}}),e.Recognizer=s},function(t,e,n){var r=n(13).DFAState,i=n(11).ATNConfigSet,o=n(8).getCachedPredictionContext,s=n(1).Map;function a(t,e){return this.atn=t,this.sharedContextCache=e,this}a.ERROR=new r(2147483647,new i),a.prototype.getCachedContext=function(t){if(null===this.sharedContextCache)return t;var e=new s;return o(t,this.sharedContextCache,e)},e.ATNSimulator=a},function(t,e,n){n(1).Set;var r=n(1).Map,i=n(1).BitSet,o=n(1).AltDict,s=n(9).ATN,a=n(4).RuleStopState,u=n(11).ATNConfigSet,c=n(15).ATNConfig,l=n(12).SemanticContext,p=(n(1).Hash,n(1).hashStuff);n(1).equalArrays;function h(){return this}h.SLL=0,h.LL=1,h.LL_EXACT_AMBIG_DETECTION=2,h.hasSLLConflictTerminatingPrediction=function(t,e){if(h.allConfigsInRuleStopStates(e))return!0;if(t===h.SLL&&e.hasSemanticContext){for(var n=new u,r=0;r<e.items.length;r++){var i=e.items[r];i=new c({semanticContext:l.NONE},i),n.add(i)}e=n}var o=h.getConflictingAltSubsets(e);return h.hasConflictingAltSet(o)&&!h.hasStateAssociatedWithOneAlt(e)},h.hasConfigInRuleStopState=function(t){for(var e=0;e<t.items.length;e++){if(t.items[e].state instanceof a)return!0}return!1},h.allConfigsInRuleStopStates=function(t){for(var e=0;e<t.items.length;e++){if(!(t.items[e].state instanceof a))return!1}return!0},h.resolvesToJustOneViableAlt=function(t){return h.getSingleViableAlt(t)},h.allSubsetsConflict=function(t){return!h.hasNonConflictingAltSet(t)},h.hasNonConflictingAltSet=function(t){for(var e=0;e<t.length;e++){if(1===t[e].length)return!0}return!1},h.hasConflictingAltSet=function(t){for(var e=0;e<t.length;e++){if(t[e].length>1)return!0}return!1},h.allSubsetsEqual=function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n];if(null===e)e=r;else if(r!==e)return!1}return!0},h.getUniqueAlt=function(t){var e=h.getAlts(t);return 1===e.length?e.minValue():s.INVALID_ALT_NUMBER},h.getAlts=function(t){var e=new i;return t.map((function(t){e.or(t)})),e},h.getConflictingAltSubsets=function(t){var e=new r;return e.hashFunction=function(t){p(t.state.stateNumber,t.context)},e.equalsFunction=function(t,e){return t.state.stateNumber==e.state.stateNumber&&t.context.equals(e.context)},t.items.map((function(t){var n=e.get(t);null===n&&(n=new i,e.put(t,n)),n.add(t.alt)})),e.getValues()},h.getStateToAltMap=function(t){var e=new o;return t.items.map((function(t){var n=e.get(t.state);null===n&&(n=new i,e.put(t.state,n)),n.add(t.alt)})),e},h.hasStateAssociatedWithOneAlt=function(t){for(var e=h.getStateToAltMap(t).values(),n=0;n<e.length;n++)if(1===e[n].length)return!0;return!1},h.getSingleViableAlt=function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n].minValue();if(null===e)e=r;else if(e!==r)return s.INVALID_ALT_NUMBER}return e},e.PredictionMode=h},function(t,e){
/*! https://mths.be/codepointat v0.2.0 by @mathias */
String.prototype.codePointAt||function(){"use strict";var t=function(){try{var t={},e=Object.defineProperty,n=e(t,t,t)&&e}catch(t){}return n}(),e=function(t){if(null==this)throw TypeError();var e=String(this),n=e.length,r=t?Number(t):0;if(r!=r&&(r=0),!(r<0||r>=n)){var i,o=e.charCodeAt(r);return o>=55296&&o<=56319&&n>r+1&&(i=e.charCodeAt(r+1))>=56320&&i<=57343?1024*(o-55296)+i-56320+65536:o}};t?t(String.prototype,"codePointAt",{value:e,configurable:!0,writable:!0}):String.prototype.codePointAt=e}()},function(t,e){var n,r,i,o;
/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
String.fromCodePoint||(n=function(){try{var t={},e=Object.defineProperty,n=e(t,t,t)&&e}catch(t){}return n}(),r=String.fromCharCode,i=Math.floor,o=function(t){var e,n,o=16384,s=[],a=-1,u=arguments.length;if(!u)return"";for(var c="";++a<u;){var l=Number(arguments[a]);if(!isFinite(l)||l<0||l>1114111||i(l)!=l)throw RangeError("Invalid code point: "+l);l<=65535?s.push(l):(e=55296+((l-=65536)>>10),n=l%1024+56320,s.push(e,n)),(a+1==u||s.length>o)&&(c+=r.apply(null,s),s.length=0)}return c},n?n(String,"fromCodePoint",{value:o,configurable:!0,writable:!0}):String.fromCodePoint=o)},function(t,e,n){var r=n(2).Token,i=n(6),o=i.NoViableAltException,s=i.InputMismatchException,a=i.FailedPredicateException,u=i.ParseCancellationException,c=n(4).ATNState,l=n(3).Interval,p=n(3).IntervalSet;function h(){}function f(){return h.call(this),this.errorRecoveryMode=!1,this.lastErrorIndex=-1,this.lastErrorStates=null,this}function _(){return f.call(this),this}h.prototype.reset=function(t){},h.prototype.recoverInline=function(t){},h.prototype.recover=function(t,e){},h.prototype.sync=function(t){},h.prototype.inErrorRecoveryMode=function(t){},h.prototype.reportError=function(t){},f.prototype=Object.create(h.prototype),f.prototype.constructor=f,f.prototype.reset=function(t){this.endErrorCondition(t)},f.prototype.beginErrorCondition=function(t){this.errorRecoveryMode=!0},f.prototype.inErrorRecoveryMode=function(t){return this.errorRecoveryMode},f.prototype.endErrorCondition=function(t){this.errorRecoveryMode=!1,this.lastErrorStates=null,this.lastErrorIndex=-1},f.prototype.reportMatch=function(t){this.endErrorCondition(t)},f.prototype.reportError=function(t,e){this.inErrorRecoveryMode(t)||(this.beginErrorCondition(t),e instanceof o?this.reportNoViableAlternative(t,e):e instanceof s?this.reportInputMismatch(t,e):e instanceof a?this.reportFailedPredicate(t,e):(console.log("unknown recognition error type: "+e.constructor.name),console.log(e.stack),t.notifyErrorListeners(e.getOffendingToken(),e.getMessage(),e)))},f.prototype.recover=function(t,e){this.lastErrorIndex===t.getInputStream().index&&null!==this.lastErrorStates&&this.lastErrorStates.indexOf(t.state)>=0&&t.consume(),this.lastErrorIndex=t._input.index,null===this.lastErrorStates&&(this.lastErrorStates=[]),this.lastErrorStates.push(t.state);var n=this.getErrorRecoverySet(t);this.consumeUntil(t,n)},f.prototype.sync=function(t){if(!this.inErrorRecoveryMode(t)){var e=t._interp.atn.states[t.state],n=t.getTokenStream().LA(1),i=t.atn.nextTokens(e);if(!i.contains(r.EPSILON)&&!i.contains(n))switch(e.stateType){case c.BLOCK_START:case c.STAR_BLOCK_START:case c.PLUS_BLOCK_START:case c.STAR_LOOP_ENTRY:if(null!==this.singleTokenDeletion(t))return;throw new s(t);case c.PLUS_LOOP_BACK:case c.STAR_LOOP_BACK:this.reportUnwantedToken(t);var o=new p;o.addSet(t.getExpectedTokens());var a=o.addSet(this.getErrorRecoverySet(t));this.consumeUntil(t,a)}}},f.prototype.reportNoViableAlternative=function(t,e){var n,i=t.getTokenStream();n=null!==i?e.startToken.type===r.EOF?"<EOF>":i.getText(new l(e.startToken.tokenIndex,e.offendingToken.tokenIndex)):"<unknown input>";var o="no viable alternative at input "+this.escapeWSAndQuote(n);t.notifyErrorListeners(o,e.offendingToken,e)},f.prototype.reportInputMismatch=function(t,e){var n="mismatched input "+this.getTokenErrorDisplay(e.offendingToken)+" expecting "+e.getExpectedTokens().toString(t.literalNames,t.symbolicNames);t.notifyErrorListeners(n,e.offendingToken,e)},f.prototype.reportFailedPredicate=function(t,e){var n="rule "+t.ruleNames[t._ctx.ruleIndex]+" "+e.message;t.notifyErrorListeners(n,e.offendingToken,e)},f.prototype.reportUnwantedToken=function(t){if(!this.inErrorRecoveryMode(t)){this.beginErrorCondition(t);var e=t.getCurrentToken(),n="extraneous input "+this.getTokenErrorDisplay(e)+" expecting "+this.getExpectedTokens(t).toString(t.literalNames,t.symbolicNames);t.notifyErrorListeners(n,e,null)}},f.prototype.reportMissingToken=function(t){if(!this.inErrorRecoveryMode(t)){this.beginErrorCondition(t);var e=t.getCurrentToken(),n="missing "+this.getExpectedTokens(t).toString(t.literalNames,t.symbolicNames)+" at "+this.getTokenErrorDisplay(e);t.notifyErrorListeners(n,e,null)}},f.prototype.recoverInline=function(t){var e=this.singleTokenDeletion(t);if(null!==e)return t.consume(),e;if(this.singleTokenInsertion(t))return this.getMissingSymbol(t);throw new s(t)},f.prototype.singleTokenInsertion=function(t){var e=t.getTokenStream().LA(1),n=t._interp.atn,r=n.states[t.state].transitions[0].target;return!!n.nextTokens(r,t._ctx).contains(e)&&(this.reportMissingToken(t),!0)},f.prototype.singleTokenDeletion=function(t){var e=t.getTokenStream().LA(2);if(this.getExpectedTokens(t).contains(e)){this.reportUnwantedToken(t),t.consume();var n=t.getCurrentToken();return this.reportMatch(t),n}return null},f.prototype.getMissingSymbol=function(t){var e,n=t.getCurrentToken(),i=this.getExpectedTokens(t).first();e=i===r.EOF?"<missing EOF>":"<missing "+t.literalNames[i]+">";var o=n,s=t.getTokenStream().LT(-1);return o.type===r.EOF&&null!==s&&(o=s),t.getTokenFactory().create(o.source,i,e,r.DEFAULT_CHANNEL,-1,-1,o.line,o.column)},f.prototype.getExpectedTokens=function(t){return t.getExpectedTokens()},f.prototype.getTokenErrorDisplay=function(t){if(null===t)return"<no token>";var e=t.text;return null===e&&(e=t.type===r.EOF?"<EOF>":"<"+t.type+">"),this.escapeWSAndQuote(e)},f.prototype.escapeWSAndQuote=function(t){return"'"+(t=(t=(t=t.replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/\t/g,"\\t"))+"'"},f.prototype.getErrorRecoverySet=function(t){for(var e=t._interp.atn,n=t._ctx,i=new p;null!==n&&n.invokingState>=0;){var o=e.states[n.invokingState].transitions[0],s=e.nextTokens(o.followState);i.addSet(s),n=n.parentCtx}return i.removeOne(r.EPSILON),i},f.prototype.consumeUntil=function(t,e){for(var n=t.getTokenStream().LA(1);n!==r.EOF&&!e.contains(n);)t.consume(),n=t.getTokenStream().LA(1)},_.prototype=Object.create(f.prototype),_.prototype.constructor=_,_.prototype.recover=function(t,e){for(var n=t._ctx;null!==n;)n.exception=e,n=n.parentCtx;throw new u(e)},_.prototype.recoverInline=function(t){this.recover(t,new s(t))},_.prototype.sync=function(t){},e.BailErrorStrategy=_,e.DefaultErrorStrategy=f},function(t,e){},function(t,e,n){var r=n(14);function i(){return r.tree.ParseTreeListener.call(this),this}i.prototype=Object.create(r.tree.ParseTreeListener.prototype),i.prototype.constructor=i,i.prototype.enterRoot=function(t){},i.prototype.exitRoot=function(t){},i.prototype.enterChoiceWord=function(t){},i.prototype.exitChoiceWord=function(t){},i.prototype.enterDifferenceLhs=function(t){},i.prototype.exitDifferenceLhs=function(t){},i.prototype.enterDifferenceRhs=function(t){},i.prototype.exitDifferenceRhs=function(t){},i.prototype.enterDifferenceWord=function(t){},i.prototype.exitDifferenceWord=function(t){},i.prototype.enterElementWord=function(t){},i.prototype.exitElementWord=function(t){},i.prototype.enterReferenceWord=function(t){},i.prototype.exitReferenceWord=function(t){},i.prototype.enterSequenceWord=function(t){},i.prototype.exitSequenceWord=function(t){},i.prototype.enterWord=function(t){},i.prototype.exitWord=function(t){},i.prototype.enterWordDefinition=function(t){},i.prototype.exitWordDefinition=function(t){},e.DekuRuleListener=i},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return kekure}));var _org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_typing_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(23),_sifaru_yusin_RuleDefinitions_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(7),_sifaru_yusin_Kekuria_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(22),__name__="sifaru_yusin.deku";const antlr4=__webpack_require__(14),{DekuRuleLexer:DekuRuleLexer}=__webpack_require__(54),{DekuRuleListener:DekuRuleListener}=__webpack_require__(35),{DekuRuleParser:DekuRuleParser}=__webpack_require__(55);var Visitor=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.c)("Visitor",[_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.p],{__module__:__name__,get visitChildren(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){var n=e.parser.ruleNames[e.ruleIndex];if("root"==n)return t.__visit_root(e);if("choiceWord"==n)return t.__visit_choiceWord(e);if("differenceLhs"==n)return t.__visit_differenceLhs(e);if("differenceRhs"==n)return t.__visit_differenceRhs(e);if("differenceWord"==n)return t.__visit_differenceWord(e);if("elementWord"==n)return t.__visit_elementWord(e);if("referenceWord"==n)return t.__visit_referenceWord(e);if("sequenceWord"==n)return t.__visit_sequenceWord(e);if("word"==n)return t.__visit_word(e);if("wordDefinition"==n)return t.__visit_wordDefinition(e);var r=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.a)("Unknown rule: {}".format(n));throw r.__cause__=null,r}))},get visitTerminal(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(self,context){var symbolic_name=context.parentCtx.parser.symbolicNames[context.symbol.type];if("CloseArguments"==symbolic_name)return null;if("CloseParenthesis"==symbolic_name)return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.s)(["CloseParenthesis"]);if("DefineOperator"==symbolic_name)return null;if("DefinitionTerminator"==symbolic_name)return null;if("DifferenceOperator"==symbolic_name)return null;if("OpenArguments"==symbolic_name)return null;if("OpenParenthesis"==symbolic_name)return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.s)(["OpenParenthesis"]);if("OrOperator"==symbolic_name)return null;if("PositiveInteger"==symbolic_name)return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.s)(["PositiveInteger",Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.l)(context.getText())]);if("ReferenceCall"==symbolic_name)return null;if("String"==symbolic_name)return Object(_sifaru_yusin_RuleDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.h)(eval(context.getText()));if("WhiteSpace"==symbolic_name){var __except0__=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.a)("WhiteSpace must skip by the parser.");throw __except0__.__cause__=null,__except0__}if("WordName"==symbolic_name)return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.s)(["WordName",context.getText()]);var __except0__=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.a)("Unknown symbol: {}".format(symbolic_name));throw __except0__.__cause__=null,__except0__}))},get __visit_root(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){var n=Object(_sifaru_yusin_RuleDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.f)();for(var r of e.children){var i=r.accept(t);n.define(i.word_name,i.word)}return n}))},get __visit_choiceWord(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){var n=null,r=[];for(var i of e.children){var o=i.accept(t);if(Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.m)(o,_sifaru_yusin_RuleDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.e))n=o;else if(Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.m)(o,_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.s)&&"PositiveInteger"==o[0]){if(null===n)throw(s=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.a)("Choice probability must followed by a sequence rule.")).__cause__=null,s;r.append(Object(_sifaru_yusin_RuleDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.b)(n,o[1]));n=null}else{var s;if(null!==o)throw(s=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.a)("Unexpected node : {}".format(o))).__cause__=null,s}}return Object(_sifaru_yusin_RuleDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.a)(r)}))},get __visit_differenceLhs(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){var n=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.o)((function(e){return e.accept(t)}),e.children);if(3==Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.n)(n))return n[1];if(1==Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.n)(n))return n[0];var r=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.a)("Invalid difference lhs: {}".format(n));throw r.__cause__=null,r}))},get __visit_differenceRhs(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){return e.children[0].accept(t)}))},get __visit_differenceWord(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){var n=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.o)((function(e){return e.accept(t)}),e.children),r=n[0],i=(n[1],n[2]);return Object(_sifaru_yusin_RuleDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.c)(r,i)}))},get __visit_elementWord(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){var n=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.o)((function(e){return e.accept(t)}),e.children);if(3==Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.n)(n))return n[1];if(1==Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.n)(n))return n[0];var r=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.a)("Invalid element word: {}".format(n));throw r.__cause__=null,r}))},get __visit_referenceWord(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){var n=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.o)((function(e){return e.accept(t)}),e.children),r=(n[0],n[1],n[2]),i=n[3];n[4];return Object(_sifaru_yusin_RuleDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.d)(r[1],i[1])}))},get __visit_sequenceWord(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){var n=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.o)((function(e){return e.accept(t)}),e.children);return 1==Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.n)(n)?n[0]:Object(_sifaru_yusin_RuleDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.g)(n)}))},get __visit_word(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){return e.children[0].accept(t)}))},get __visit_wordDefinition(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){var n=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.o)((function(e){return e.accept(t)}),e.children),r=n[0],i=(n[1],n[2]);n[3];return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.i)([["word_name",r[1]],["word",i]])}))}}),DekuRuleListener_py=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.c)("DekuRuleListener_py",[_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.p],{__module__:__name__,get __init__(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t){t.original=new DekuRuleListener}))},get visitTerminal(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){return t.original.visitTerminal(e)}))},get visitErrorNode(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){return t.original.visitErrorNode(e)}))},get enterEveryRule(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){return t.original.enterEveryRule(e)}))},get exitEveryRule(){return Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.d)(this,(function(t,e){return t.original.exitEveryRule(e)}))}}),DekuRulePrinter=Object(_org_transcrypt_runtime_js__WEBPACK_IMPORTED_MODULE_0__.c)("DekuRulePrinter",[DekuRuleListener_py],{__module__:__name__}),parse_deku_rule=function(t){var e=new antlr4.InputStream(t),n=new DekuRuleLexer(e),r=new antlr4.CommonTokenStream(n),i=new DekuRuleParser(r);i.buildParseTrees=!0;var o=i.root();return antlr4.tree.ParseTreeWalker.DEFAULT.walk(DekuRulePrinter(),o),o.accept(Visitor())},DEKU_RULES='\nV = "a" 1 | "i" 1 | "u" 1 ;\n\nC = "F" 3 |\n    "P" 1 |\n    "B" 1 |\n    "M" 3 |\n    "S" 3 |\n    "Z" 2 |\n    "T" 3 |\n    "D" 3 |\n    "N" 5 |\n    "X" 1 |\n    "J" 1 |\n    "C" 1 |\n    "R" 5 |\n    "K" 3 |\n    "G" 2 |\n    "H" 3 |\n    "ʻ" 3 ;\n\nDEKU =\n    { C\n      V\n      { ref(V 0) 2 | { V - ref(V 0) } 1 }\n      { ref(C 0) 1 | { C - ref(C 0) } 1 } } 2 |\n    { C\n      V\n      { ref(C 0) 1 | { C - ref(C 0) } 1 }\n      { ref(V 0) 2 | { V - ref(V 0) } 1 } } 2 |\n    { V\n      C\n      { ref(V 0) 2 | { V - ref(V 0) } 1 }\n      { ref(C 0) 1 | { C - ref(C 0) } 1 } } 2 |\n    { V\n      { C - "ʻ" }\n      { ref(C 0) 1 | { C - ref(C 0) } 1 }\n      { ref(V 0) 2 | { V - ref(V 0) } 1 } } 2 |\n    { C V } 1 |\n    { V C } 1 ;\n',DEKU_RULE_DEFINITIONS=parse_deku_rule(DEKU_RULES),kekure=function(){return Object(_sifaru_yusin_Kekuria_js__WEBPACK_IMPORTED_MODULE_3__.a)(DEKU_RULE_DEFINITIONS).kekure("DEKU")}},function(t,e,n){e.ATN=n(9).ATN,e.ATNDeserializer=n(25).ATNDeserializer,e.LexerATNSimulator=n(40).LexerATNSimulator,e.ParserATNSimulator=n(43).ParserATNSimulator,e.PredictionMode=n(30).PredictionMode},function(t,e,n){var r=n(1).Set,i=n(1).BitSet,o=n(2).Token,s=n(15).ATNConfig,a=(n(3).Interval,n(3).IntervalSet),u=n(4).RuleStopState,c=n(10).RuleTransition,l=n(10).NotSetTransition,p=n(10).WildcardTransition,h=n(10).AbstractPredicateTransition,f=n(8),_=f.predictionContextFromRuleContext,d=f.PredictionContext,y=f.SingletonPredictionContext;function g(t){this.atn=t}g.HIT_PRED=o.INVALID_TYPE,g.prototype.getDecisionLookahead=function(t){if(null===t)return null;for(var e=t.transitions.length,n=[],o=0;o<e;o++){n[o]=new a;var s=new r;this._LOOK(t.transition(o).target,null,d.EMPTY,n[o],s,new i,!1,!1),(0===n[o].length||n[o].contains(g.HIT_PRED))&&(n[o]=null)}return n},g.prototype.LOOK=function(t,e,n){var o=new a,s=null!==(n=n||null)?_(t.atn,n):null;return this._LOOK(t,e,s,o,new r,new i,!0,!0),o},g.prototype._LOOK=function(t,e,n,r,i,a,f,_){var v=new s({state:t,alt:0,context:n},null);if(!i.contains(v)){if(i.add(v),t===e){if(null===n)return void r.addOne(o.EPSILON);if(n.isEmpty()&&_)return void r.addOne(o.EOF)}if(t instanceof u){if(null===n)return void r.addOne(o.EPSILON);if(n.isEmpty()&&_)return void r.addOne(o.EOF);if(n!==d.EMPTY){for(var m=0;m<n.length;m++){var x=this.atn.states[n.getReturnState(m)],T=a.contains(x.ruleIndex);try{a.remove(x.ruleIndex),this._LOOK(x,e,n.getParent(m),r,i,a,f,_)}finally{T&&a.add(x.ruleIndex)}}return}}for(var E=0;E<t.transitions.length;E++){var S=t.transitions[E];if(S.constructor===c){if(a.contains(S.target.ruleIndex))continue;var O=y.create(n,S.followState.stateNumber);try{a.add(S.target.ruleIndex),this._LOOK(S.target,e,O,r,i,a,f,_)}finally{a.remove(S.target.ruleIndex)}}else if(S instanceof h)f?this._LOOK(S.target,e,n,r,i,a,f,_):r.addOne(g.HIT_PRED);else if(S.isEpsilon)this._LOOK(S.target,e,n,r,i,a,f,_);else if(S.constructor===p)r.addRange(o.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType);else{var C=S.label;null!==C&&(S instanceof l&&(C=C.complement(o.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType)),r.addSet(C))}}}},e.LL1Analyzer=g},function(t,e){function n(){}n.LEXER=0,n.PARSER=1,e.ATNType=n},function(t,e,n){var r=n(2).Token,i=n(17).Lexer,o=n(9).ATN,s=n(29).ATNSimulator,a=n(13).DFAState,u=(n(11).ATNConfigSet,n(11).OrderedATNConfigSet),c=n(8).PredictionContext,l=n(8).SingletonPredictionContext,p=n(4).RuleStopState,h=n(15).LexerATNConfig,f=n(10).Transition,_=n(42).LexerActionExecutor,d=n(6).LexerNoViableAltException;function y(t){t.index=-1,t.line=0,t.column=-1,t.dfaState=null}function g(){return y(this),this}function v(t,e,n,r){return s.call(this,e,r),this.decisionToDFA=n,this.recog=t,this.startIndex=-1,this.line=1,this.column=0,this.mode=i.DEFAULT_MODE,this.prevAccept=new g,this}g.prototype.reset=function(){y(this)},v.prototype=Object.create(s.prototype),v.prototype.constructor=v,v.debug=!1,v.dfa_debug=!1,v.MIN_DFA_EDGE=0,v.MAX_DFA_EDGE=127,v.match_calls=0,v.prototype.copyState=function(t){this.column=t.column,this.line=t.line,this.mode=t.mode,this.startIndex=t.startIndex},v.prototype.match=function(t,e){this.match_calls+=1,this.mode=e;var n=t.mark();try{this.startIndex=t.index,this.prevAccept.reset();var r=this.decisionToDFA[e];return null===r.s0?this.matchATN(t):this.execATN(t,r.s0)}finally{t.release(n)}},v.prototype.reset=function(){this.prevAccept.reset(),this.startIndex=-1,this.line=1,this.column=0,this.mode=i.DEFAULT_MODE},v.prototype.matchATN=function(t){var e=this.atn.modeToStartState[this.mode];v.debug&&console.log("matchATN mode "+this.mode+" start: "+e);var n=this.mode,r=this.computeStartState(t,e),i=r.hasSemanticContext;r.hasSemanticContext=!1;var o=this.addDFAState(r);i||(this.decisionToDFA[this.mode].s0=o);var s=this.execATN(t,o);return v.debug&&console.log("DFA after matchATN: "+this.decisionToDFA[n].toLexerString()),s},v.prototype.execATN=function(t,e){v.debug&&console.log("start state closure="+e.configs),e.isAcceptState&&this.captureSimState(this.prevAccept,t,e);for(var n=t.LA(1),i=e;;){v.debug&&console.log("execATN loop starting closure: "+i.configs);var o=this.getExistingTargetState(i,n);if(null===o&&(o=this.computeTargetState(t,i,n)),o===s.ERROR)break;if(n!==r.EOF&&this.consume(t),o.isAcceptState&&(this.captureSimState(this.prevAccept,t,o),n===r.EOF))break;n=t.LA(1),i=o}return this.failOrAccept(this.prevAccept,t,i.configs,n)},v.prototype.getExistingTargetState=function(t,e){if(null===t.edges||e<v.MIN_DFA_EDGE||e>v.MAX_DFA_EDGE)return null;var n=t.edges[e-v.MIN_DFA_EDGE];return void 0===n&&(n=null),v.debug&&null!==n&&console.log("reuse state "+t.stateNumber+" edge to "+n.stateNumber),n},v.prototype.computeTargetState=function(t,e,n){var r=new u;return this.getReachableConfigSet(t,e.configs,r,n),0===r.items.length?(r.hasSemanticContext||this.addDFAEdge(e,n,s.ERROR),s.ERROR):this.addDFAEdge(e,n,null,r)},v.prototype.failOrAccept=function(t,e,n,i){if(null!==this.prevAccept.dfaState){var o=t.dfaState.lexerActionExecutor;return this.accept(e,o,this.startIndex,t.index,t.line,t.column),t.dfaState.prediction}if(i===r.EOF&&e.index===this.startIndex)return r.EOF;throw new d(this.recog,e,this.startIndex,n)},v.prototype.getReachableConfigSet=function(t,e,n,i){for(var s=o.INVALID_ALT_NUMBER,a=0;a<e.items.length;a++){var u=e.items[a],c=u.alt===s;if(!c||!u.passedThroughNonGreedyDecision){v.debug&&console.log("testing %s at %s\n",this.getTokenName(i),u.toString(this.recog,!0));for(var l=0;l<u.state.transitions.length;l++){var p=u.state.transitions[l],f=this.getReachableTarget(p,i);if(null!==f){var _=u.lexerActionExecutor;null!==_&&(_=_.fixOffsetBeforeMatch(t.index-this.startIndex));var d=i===r.EOF,y=new h({state:f,lexerActionExecutor:_},u);this.closure(t,y,n,c,!0,d)&&(s=u.alt)}}}}},v.prototype.accept=function(t,e,n,r,i,o){v.debug&&console.log("ACTION %s\n",e),t.seek(r),this.line=i,this.column=o,null!==e&&null!==this.recog&&e.execute(this.recog,t,n)},v.prototype.getReachableTarget=function(t,e){return t.matches(e,0,i.MAX_CHAR_VALUE)?t.target:null},v.prototype.computeStartState=function(t,e){for(var n=c.EMPTY,r=new u,i=0;i<e.transitions.length;i++){var o=e.transitions[i].target,s=new h({state:o,alt:i+1,context:n},null);this.closure(t,s,r,!1,!1,!1)}return r},v.prototype.closure=function(t,e,n,r,i,o){var s=null;if(v.debug&&console.log("closure("+e.toString(this.recog,!0)+")"),e.state instanceof p){if(v.debug&&(null!==this.recog?console.log("closure at %s rule stop %s\n",this.recog.ruleNames[e.state.ruleIndex],e):console.log("closure at rule stop %s\n",e)),null===e.context||e.context.hasEmptyPath()){if(null===e.context||e.context.isEmpty())return n.add(e),!0;n.add(new h({state:e.state,context:c.EMPTY},e)),r=!0}if(null!==e.context&&!e.context.isEmpty())for(var a=0;a<e.context.length;a++)if(e.context.getReturnState(a)!==c.EMPTY_RETURN_STATE){var u=e.context.getParent(a),l=this.atn.states[e.context.getReturnState(a)];s=new h({state:l,context:u},e),r=this.closure(t,s,n,r,i,o)}return r}e.state.epsilonOnlyTransitions||r&&e.passedThroughNonGreedyDecision||n.add(e);for(var f=0;f<e.state.transitions.length;f++){var _=e.state.transitions[f];null!==(s=this.getEpsilonTarget(t,e,_,n,i,o))&&(r=this.closure(t,s,n,r,i,o))}return r},v.prototype.getEpsilonTarget=function(t,e,n,o,s,a){var u=null;if(n.serializationType===f.RULE){var c=l.create(e.context,n.followState.stateNumber);u=new h({state:n.target,context:c},e)}else{if(n.serializationType===f.PRECEDENCE)throw"Precedence predicates are not supported in lexers.";if(n.serializationType===f.PREDICATE)v.debug&&console.log("EVAL rule "+n.ruleIndex+":"+n.predIndex),o.hasSemanticContext=!0,this.evaluatePredicate(t,n.ruleIndex,n.predIndex,s)&&(u=new h({state:n.target},e));else if(n.serializationType===f.ACTION)if(null===e.context||e.context.hasEmptyPath()){var p=_.append(e.lexerActionExecutor,this.atn.lexerActions[n.actionIndex]);u=new h({state:n.target,lexerActionExecutor:p},e)}else u=new h({state:n.target},e);else n.serializationType===f.EPSILON?u=new h({state:n.target},e):n.serializationType!==f.ATOM&&n.serializationType!==f.RANGE&&n.serializationType!==f.SET||a&&n.matches(r.EOF,0,i.MAX_CHAR_VALUE)&&(u=new h({state:n.target},e))}return u},v.prototype.evaluatePredicate=function(t,e,n,r){if(null===this.recog)return!0;if(!r)return this.recog.sempred(null,e,n);var i=this.column,o=this.line,s=t.index,a=t.mark();try{return this.consume(t),this.recog.sempred(null,e,n)}finally{this.column=i,this.line=o,t.seek(s),t.release(a)}},v.prototype.captureSimState=function(t,e,n){t.index=e.index,t.line=this.line,t.column=this.column,t.dfaState=n},v.prototype.addDFAEdge=function(t,e,n,r){if(void 0===n&&(n=null),void 0===r&&(r=null),null===n&&null!==r){var i=r.hasSemanticContext;if(r.hasSemanticContext=!1,n=this.addDFAState(r),i)return n}return e<v.MIN_DFA_EDGE||e>v.MAX_DFA_EDGE||(v.debug&&console.log("EDGE "+t+" -> "+n+" upon "+e),null===t.edges&&(t.edges=[]),t.edges[e-v.MIN_DFA_EDGE]=n),n},v.prototype.addDFAState=function(t){for(var e=new a(null,t),n=null,r=0;r<t.items.length;r++){var i=t.items[r];if(i.state instanceof p){n=i;break}}null!==n&&(e.isAcceptState=!0,e.lexerActionExecutor=n.lexerActionExecutor,e.prediction=this.atn.ruleToTokenType[n.state.ruleIndex]);var o=this.decisionToDFA[this.mode],s=o.states.get(e);if(null!==s)return s;var u=e;return u.stateNumber=o.states.length,t.setReadonly(!0),u.configs=t,o.states.add(u),u},v.prototype.getDFA=function(t){return this.decisionToDFA[t]},v.prototype.getText=function(t){return t.getText(this.startIndex,t.index-1)},v.prototype.consume=function(t){t.LA(1)==="\n".charCodeAt(0)?(this.line+=1,this.column=0):this.column+=1,t.consume()},v.prototype.getTokenName=function(t){return-1===t?"EOF":"'"+String.fromCharCode(t)+"'"},e.LexerATNSimulator=v},function(t,e,n){var r=n(2).CommonToken;function i(){return this}function o(t){return i.call(this),this.copyText=void 0!==t&&t,this}o.prototype=Object.create(i.prototype),o.prototype.constructor=o,o.DEFAULT=new o,o.prototype.create=function(t,e,n,i,o,s,a,u){var c=new r(t,e,i,o,s);return c.line=a,c.column=u,null!==n?c.text=n:this.copyText&&null!==t[1]&&(c.text=t[1].getText(o,s)),c},o.prototype.createThin=function(t,e){var n=new r(null,t);return n.text=e,n},e.CommonTokenFactory=o},function(t,e,n){var r=n(1).hashStuff,i=n(27).LexerIndexedCustomAction;function o(t){return this.lexerActions=null===t?[]:t,this.cachedHashCode=r(t),this}o.append=function(t,e){return new o(null===t?[e]:t.lexerActions.concat([e]))},o.prototype.fixOffsetBeforeMatch=function(t){for(var e=null,n=0;n<this.lexerActions.length;n++)!this.lexerActions[n].isPositionDependent||this.lexerActions[n]instanceof i||(null===e&&(e=this.lexerActions.concat([])),e[n]=new i(t,this.lexerActions[n]));return null===e?this:new o(e)},o.prototype.execute=function(t,e,n){var r=!1,o=e.index;try{for(var s=0;s<this.lexerActions.length;s++){var a=this.lexerActions[s];if(a instanceof i){var u=a.offset;e.seek(n+u),a=a.action,r=n+u!==o}else a.isPositionDependent&&(e.seek(o),r=!1);a.execute(t)}}finally{r&&e.seek(o)}},o.prototype.hashCode=function(){return this.cachedHashCode},o.prototype.updateHashCode=function(t){t.update(this.cachedHashCode)},o.prototype.equals=function(t){if(this===t)return!0;if(t instanceof o){if(this.cachedHashCode!=t.cachedHashCode)return!1;if(this.lexerActions.length!=t.lexerActions.length)return!1;for(var e=this.lexerActions.length,n=0;n<e;++n)if(!this.lexerActions[n].equals(t.lexerActions[n]))return!1;return!0}return!1},e.LexerActionExecutor=o},function(t,e,n){var r=n(1),i=r.Set,o=r.BitSet,s=r.DoubleDict,a=n(9).ATN,u=n(4).ATNState,c=n(15).ATNConfig,l=n(11).ATNConfigSet,p=n(2).Token,h=n(13).DFAState,f=n(13).PredPrediction,_=n(29).ATNSimulator,d=n(30).PredictionMode,y=n(16).RuleContext,g=(n(20).ParserRuleContext,n(12).SemanticContext),v=(n(4).StarLoopEntryState,n(4).RuleStopState),m=n(8).PredictionContext,x=n(3).Interval,T=n(10),E=T.Transition,S=T.SetTransition,O=T.NotSetTransition,C=T.RuleTransition,A=T.ActionTransition,b=n(6).NoViableAltException,R=n(8).SingletonPredictionContext,P=n(8).predictionContextFromRuleContext;function k(t,e,n,r){return _.call(this,e,r),this.parser=t,this.decisionToDFA=n,this.predictionMode=d.LL,this._input=null,this._startIndex=0,this._outerContext=null,this._dfa=null,this.mergeCache=null,this}k.prototype=Object.create(_.prototype),k.prototype.constructor=k,k.prototype.debug=!1,k.prototype.debug_closure=!1,k.prototype.debug_add=!1,k.prototype.debug_list_atn_decisions=!1,k.prototype.dfa_debug=!1,k.prototype.retry_debug=!1,k.prototype.reset=function(){},k.prototype.adaptivePredict=function(t,e,n){(this.debug||this.debug_list_atn_decisions)&&console.log("adaptivePredict decision "+e+" exec LA(1)=="+this.getLookaheadName(t)+" line "+t.LT(1).line+":"+t.LT(1).column),this._input=t,this._startIndex=t.index,this._outerContext=n;var r=this.decisionToDFA[e];this._dfa=r;var i=t.mark(),o=t.index;try{var s;if(null===(s=r.precedenceDfa?r.getPrecedenceStartState(this.parser.getPrecedence()):r.s0)){null===n&&(n=y.EMPTY),(this.debug||this.debug_list_atn_decisions)&&console.log("predictATN decision "+r.decision+" exec LA(1)=="+this.getLookaheadName(t)+", outerContext="+n.toString(this.parser.ruleNames));var a=this.computeStartState(r.atnStartState,y.EMPTY,!1);r.precedenceDfa?(r.s0.configs=a,a=this.applyPrecedenceFilter(a),s=this.addDFAState(r,new h(null,a)),r.setPrecedenceStartState(this.parser.getPrecedence(),s)):(s=this.addDFAState(r,new h(null,a)),r.s0=s)}var u=this.execATN(r,s,t,o,n);return this.debug&&console.log("DFA after predictATN: "+r.toString(this.parser.literalNames)),u}finally{this._dfa=null,this.mergeCache=null,t.seek(o),t.release(i)}},k.prototype.execATN=function(t,e,n,r,i){var o;(this.debug||this.debug_list_atn_decisions)&&console.log("execATN decision "+t.decision+" exec LA(1)=="+this.getLookaheadName(n)+" line "+n.LT(1).line+":"+n.LT(1).column);var s=e;this.debug&&console.log("s0 = "+e);for(var u=n.LA(1);;){var c=this.getExistingTargetState(s,u);if(null===c&&(c=this.computeTargetState(t,s,u)),c===_.ERROR){var l=this.noViableAlt(n,i,s.configs,r);if(n.seek(r),(o=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(s.configs,i))!==a.INVALID_ALT_NUMBER)return o;throw l}if(c.requiresFullContext&&this.predictionMode!==d.SLL){var h=null;if(null!==c.predicates){this.debug&&console.log("DFA state has preds in DFA sim LL failover");var f=n.index;if(f!==r&&n.seek(r),1===(h=this.evalSemanticContext(c.predicates,i,!0)).length)return this.debug&&console.log("Full LL avoided"),h.minValue();f!==r&&n.seek(f)}this.dfa_debug&&console.log("ctx sensitive state "+i+" in "+c);var y=this.computeStartState(t.atnStartState,i,!0);return this.reportAttemptingFullContext(t,h,c.configs,r,n.index),o=this.execATNWithFullContext(t,c,y,n,r,i)}if(c.isAcceptState){if(null===c.predicates)return c.prediction;var g=n.index;n.seek(r);var v=this.evalSemanticContext(c.predicates,i,!0);if(0===v.length)throw this.noViableAlt(n,i,c.configs,r);return 1===v.length||this.reportAmbiguity(t,c,r,g,!1,v,c.configs),v.minValue()}s=c,u!==p.EOF&&(n.consume(),u=n.LA(1))}},k.prototype.getExistingTargetState=function(t,e){var n=t.edges;return null===n?null:n[e+1]||null},k.prototype.computeTargetState=function(t,e,n){var i=this.computeReachSet(e.configs,n,!1);if(null===i)return this.addDFAEdge(t,e,n,_.ERROR),_.ERROR;var o=new h(null,i),s=this.getUniqueAlt(i);if(this.debug){var u=d.getConflictingAltSubsets(i);console.log("SLL altSubSets="+r.arrayToString(u)+", previous="+e.configs+", configs="+i+", predict="+s+", allSubsetsConflict="+d.allSubsetsConflict(u)+", conflictingAlts="+this.getConflictingAlts(i))}return s!==a.INVALID_ALT_NUMBER?(o.isAcceptState=!0,o.configs.uniqueAlt=s,o.prediction=s):d.hasSLLConflictTerminatingPrediction(this.predictionMode,i)&&(o.configs.conflictingAlts=this.getConflictingAlts(i),o.requiresFullContext=!0,o.isAcceptState=!0,o.prediction=o.configs.conflictingAlts.minValue()),o.isAcceptState&&o.configs.hasSemanticContext&&(this.predicateDFAState(o,this.atn.getDecisionState(t.decision)),null!==o.predicates&&(o.prediction=a.INVALID_ALT_NUMBER)),o=this.addDFAEdge(t,e,n,o)},k.prototype.predicateDFAState=function(t,e){var n=e.transitions.length,r=this.getConflictingAltsOrUniqueAlt(t.configs),i=this.getPredsForAmbigAlts(r,t.configs,n);null!==i?(t.predicates=this.getPredicatePredictions(r,i),t.prediction=a.INVALID_ALT_NUMBER):t.prediction=r.minValue()},k.prototype.execATNWithFullContext=function(t,e,n,r,i,o){(this.debug||this.debug_list_atn_decisions)&&console.log("execATNWithFullContext "+n);var s=!1,u=null,c=n;r.seek(i);for(var l=r.LA(1),h=-1;;){if(null===(u=this.computeReachSet(c,l,!0))){var f=this.noViableAlt(r,o,c,i);r.seek(i);var _=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(c,o);if(_!==a.INVALID_ALT_NUMBER)return _;throw f}var y=d.getConflictingAltSubsets(u);if(this.debug&&console.log("LL altSubSets="+y+", predict="+d.getUniqueAlt(y)+", resolvesToJustOneViableAlt="+d.resolvesToJustOneViableAlt(y)),u.uniqueAlt=this.getUniqueAlt(u),u.uniqueAlt!==a.INVALID_ALT_NUMBER){h=u.uniqueAlt;break}if(this.predictionMode!==d.LL_EXACT_AMBIG_DETECTION){if((h=d.resolvesToJustOneViableAlt(y))!==a.INVALID_ALT_NUMBER)break}else if(d.allSubsetsConflict(y)&&d.allSubsetsEqual(y)){s=!0,h=d.getSingleViableAlt(y);break}c=u,l!==p.EOF&&(r.consume(),l=r.LA(1))}return u.uniqueAlt!==a.INVALID_ALT_NUMBER?(this.reportContextSensitivity(t,h,u,i,r.index),h):(this.reportAmbiguity(t,e,i,r.index,s,null,u),h)},k.prototype.computeReachSet=function(t,e,n){this.debug&&console.log("in computeReachSet, starting closure: "+t),null===this.mergeCache&&(this.mergeCache=new s);for(var r=new l(n),o=null,u=0;u<t.items.length;u++){var h=t.items[u];if(this.debug_add&&console.log("testing "+this.getTokenName(e)+" at "+h),h.state instanceof v)(n||e===p.EOF)&&(null===o&&(o=[]),o.push(h),this.debug_add&&console.log("added "+h+" to skippedStopStates"));else for(var f=0;f<h.state.transitions.length;f++){var _=h.state.transitions[f],y=this.getReachableTarget(_,e);if(null!==y){var g=new c({state:y},h);r.add(g,this.mergeCache),this.debug_add&&console.log("added "+g+" to intermediate")}}}var m=null;if(null===o&&e!==p.EOF&&(1===r.items.length||this.getUniqueAlt(r)!==a.INVALID_ALT_NUMBER)&&(m=r),null===m){m=new l(n);for(var x=new i,T=e===p.EOF,E=0;E<r.items.length;E++)this.closure(r.items[E],m,x,!1,n,T)}if(e===p.EOF&&(m=this.removeAllConfigsNotInRuleStopState(m,m===r)),!(null===o||n&&d.hasConfigInRuleStopState(m)))for(var S=0;S<o.length;S++)m.add(o[S],this.mergeCache);return 0===m.items.length?null:m},k.prototype.removeAllConfigsNotInRuleStopState=function(t,e){if(d.allConfigsInRuleStopStates(t))return t;for(var n=new l(t.fullCtx),r=0;r<t.items.length;r++){var i=t.items[r];if(i.state instanceof v)n.add(i,this.mergeCache);else if(e&&i.state.epsilonOnlyTransitions)if(this.atn.nextTokens(i.state).contains(p.EPSILON)){var o=this.atn.ruleToStopState[i.state.ruleIndex];n.add(new c({state:o},i),this.mergeCache)}}return n},k.prototype.computeStartState=function(t,e,n){for(var r=P(this.atn,e),o=new l(n),s=0;s<t.transitions.length;s++){var a=t.transitions[s].target,u=new c({state:a,alt:s+1,context:r},null),p=new i;this.closure(u,o,p,!0,n,!1)}return o},k.prototype.applyPrecedenceFilter=function(t){for(var e,n=[],r=new l(t.fullCtx),i=0;i<t.items.length;i++)if(1===(e=t.items[i]).alt){var o=e.semanticContext.evalPrecedence(this.parser,this._outerContext);null!==o&&(n[e.state.stateNumber]=e.context,o!==e.semanticContext?r.add(new c({semanticContext:o},e),this.mergeCache):r.add(e,this.mergeCache))}for(i=0;i<t.items.length;i++)if(1!==(e=t.items[i]).alt){if(!e.precedenceFilterSuppressed){var s=n[e.state.stateNumber]||null;if(null!==s&&s.equals(e.context))continue}r.add(e,this.mergeCache)}return r},k.prototype.getReachableTarget=function(t,e){return t.matches(e,0,this.atn.maxTokenType)?t.target:null},k.prototype.getPredsForAmbigAlts=function(t,e,n){for(var i=[],o=0;o<e.items.length;o++){var s=e.items[o];t.contains(s.alt)&&(i[s.alt]=g.orContext(i[s.alt]||null,s.semanticContext))}var a=0;for(o=1;o<n+1;o++){var u=i[o]||null;null===u?i[o]=g.NONE:u!==g.NONE&&(a+=1)}return 0===a&&(i=null),this.debug&&console.log("getPredsForAmbigAlts result "+r.arrayToString(i)),i},k.prototype.getPredicatePredictions=function(t,e){for(var n=[],r=!1,i=1;i<e.length;i++){var o=e[i];null!==t&&t.contains(i)&&n.push(new f(o,i)),o!==g.NONE&&(r=!0)}return r?n:null},k.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule=function(t,e){var n=this.splitAccordingToSemanticValidity(t,e),r=n[0],i=n[1],o=this.getAltThatFinishedDecisionEntryRule(r);return o!==a.INVALID_ALT_NUMBER||i.items.length>0&&(o=this.getAltThatFinishedDecisionEntryRule(i))!==a.INVALID_ALT_NUMBER?o:a.INVALID_ALT_NUMBER},k.prototype.getAltThatFinishedDecisionEntryRule=function(t){for(var e=[],n=0;n<t.items.length;n++){var r=t.items[n];(r.reachesIntoOuterContext>0||r.state instanceof v&&r.context.hasEmptyPath())&&e.indexOf(r.alt)<0&&e.push(r.alt)}return 0===e.length?a.INVALID_ALT_NUMBER:Math.min.apply(null,e)},k.prototype.splitAccordingToSemanticValidity=function(t,e){for(var n=new l(t.fullCtx),r=new l(t.fullCtx),i=0;i<t.items.length;i++){var o=t.items[i];if(o.semanticContext!==g.NONE)o.semanticContext.evaluate(this.parser,e)?n.add(o):r.add(o);else n.add(o)}return[n,r]},k.prototype.evalSemanticContext=function(t,e,n){for(var r=new o,i=0;i<t.length;i++){var s=t[i];if(s.pred!==g.NONE){var a=s.pred.evaluate(this.parser,e);if((this.debug||this.dfa_debug)&&console.log("eval pred "+s+"="+a),a&&((this.debug||this.dfa_debug)&&console.log("PREDICT "+s.alt),r.add(s.alt),!n))break}else if(r.add(s.alt),!n)break}return r},k.prototype.closure=function(t,e,n,r,i,o){this.closureCheckingStopState(t,e,n,r,i,0,o)},k.prototype.closureCheckingStopState=function(t,e,n,r,i,o,s){if((this.debug||this.debug_closure)&&(console.log("closure("+t.toString(this.parser,!0)+")"),t.reachesIntoOuterContext>50))throw"problem";if(t.state instanceof v){if(!t.context.isEmpty()){for(var a=0;a<t.context.length;a++)if(t.context.getReturnState(a)!==m.EMPTY_RETURN_STATE){var u=this.atn.states[t.context.getReturnState(a)],l=t.context.getParent(a),p={state:u,alt:t.alt,context:l,semanticContext:t.semanticContext},h=new c(p,null);h.reachesIntoOuterContext=t.reachesIntoOuterContext,this.closureCheckingStopState(h,e,n,r,i,o-1,s)}else{if(i){e.add(new c({state:t.state,context:m.EMPTY},t),this.mergeCache);continue}this.debug&&console.log("FALLING off rule "+this.getRuleName(t.state.ruleIndex)),this.closure_(t,e,n,r,i,o,s)}return}if(i)return void e.add(t,this.mergeCache);this.debug&&console.log("FALLING off rule "+this.getRuleName(t.state.ruleIndex))}this.closure_(t,e,n,r,i,o,s)},k.prototype.closure_=function(t,e,n,r,i,o,s){var a=t.state;a.epsilonOnlyTransitions||e.add(t,this.mergeCache);for(var u=0;u<a.transitions.length;u++)if(0!=u||!this.canDropLoopEntryEdgeInLeftRecursiveRule(t)){var c=a.transitions[u],l=r&&!(c instanceof A),p=this.getEpsilonTarget(t,c,l,0===o,i,s);if(null!==p){var h=o;if(t.state instanceof v){if(null!==this._dfa&&this._dfa.precedenceDfa&&c.outermostPrecedenceReturn===this._dfa.atnStartState.ruleIndex&&(p.precedenceFilterSuppressed=!0),p.reachesIntoOuterContext+=1,n.add(p)!==p)continue;e.dipsIntoOuterContext=!0,h-=1,this.debug&&console.log("dips into outer ctx: "+p)}else{if(!c.isEpsilon&&n.add(p)!==p)continue;c instanceof C&&h>=0&&(h+=1)}this.closureCheckingStopState(p,e,n,l,i,h,s)}}},k.prototype.canDropLoopEntryEdgeInLeftRecursiveRule=function(t){var e=t.state;if(e.stateType!=u.STAR_LOOP_ENTRY)return!1;if(e.stateType!=u.STAR_LOOP_ENTRY||!e.isPrecedenceDecision||t.context.isEmpty()||t.context.hasEmptyPath())return!1;for(var n=t.context.length,r=0;r<n;r++){if((s=this.atn.states[t.context.getReturnState(r)]).ruleIndex!=e.ruleIndex)return!1}var i=e.transitions[0].target.endState.stateNumber,o=this.atn.states[i];for(r=0;r<n;r++){var s,a=t.context.getReturnState(r);if(1!=(s=this.atn.states[a]).transitions.length||!s.transitions[0].isEpsilon)return!1;var c=s.transitions[0].target;if((s.stateType!=u.BLOCK_END||c!=e)&&(s!=o&&c!=o&&(c.stateType!=u.BLOCK_END||1!=c.transitions.length||!c.transitions[0].isEpsilon||c.transitions[0].target!=e)))return!1}return!0},k.prototype.getRuleName=function(t){return null!==this.parser&&t>=0?this.parser.ruleNames[t]:"<rule "+t+">"},k.prototype.getEpsilonTarget=function(t,e,n,r,i,o){switch(e.serializationType){case E.RULE:return this.ruleTransition(t,e);case E.PRECEDENCE:return this.precedenceTransition(t,e,n,r,i);case E.PREDICATE:return this.predTransition(t,e,n,r,i);case E.ACTION:return this.actionTransition(t,e);case E.EPSILON:return new c({state:e.target},t);case E.ATOM:case E.RANGE:case E.SET:return o&&e.matches(p.EOF,0,1)?new c({state:e.target},t):null;default:return null}},k.prototype.actionTransition=function(t,e){if(this.debug){var n=-1==e.actionIndex?65535:e.actionIndex;console.log("ACTION edge "+e.ruleIndex+":"+n)}return new c({state:e.target},t)},k.prototype.precedenceTransition=function(t,e,n,i,o){this.debug&&(console.log("PRED (collectPredicates="+n+") "+e.precedence+">=_p, ctx dependent=true"),null!==this.parser&&console.log("context surrounding pred is "+r.arrayToString(this.parser.getRuleInvocationStack())));var s=null;if(n&&i)if(o){var a=this._input.index;this._input.seek(this._startIndex);var u=e.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(a),u&&(s=new c({state:e.target},t))}else{var l=g.andContext(t.semanticContext,e.getPredicate());s=new c({state:e.target,semanticContext:l},t)}else s=new c({state:e.target},t);return this.debug&&console.log("config from pred transition="+s),s},k.prototype.predTransition=function(t,e,n,i,o){this.debug&&(console.log("PRED (collectPredicates="+n+") "+e.ruleIndex+":"+e.predIndex+", ctx dependent="+e.isCtxDependent),null!==this.parser&&console.log("context surrounding pred is "+r.arrayToString(this.parser.getRuleInvocationStack())));var s=null;if(n&&(e.isCtxDependent&&i||!e.isCtxDependent))if(o){var a=this._input.index;this._input.seek(this._startIndex);var u=e.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(a),u&&(s=new c({state:e.target},t))}else{var l=g.andContext(t.semanticContext,e.getPredicate());s=new c({state:e.target,semanticContext:l},t)}else s=new c({state:e.target},t);return this.debug&&console.log("config from pred transition="+s),s},k.prototype.ruleTransition=function(t,e){this.debug&&console.log("CALL rule "+this.getRuleName(e.target.ruleIndex)+", ctx="+t.context);var n=e.followState,r=R.create(t.context,n.stateNumber);return new c({state:e.target,context:r},t)},k.prototype.getConflictingAlts=function(t){var e=d.getConflictingAltSubsets(t);return d.getAlts(e)},k.prototype.getConflictingAltsOrUniqueAlt=function(t){var e=null;return t.uniqueAlt!==a.INVALID_ALT_NUMBER?(e=new o).add(t.uniqueAlt):e=t.conflictingAlts,e},k.prototype.getTokenName=function(t){if(t===p.EOF)return"EOF";if(null!==this.parser&&null!==this.parser.literalNames){if(!(t>=this.parser.literalNames.length&&t>=this.parser.symbolicNames.length))return(this.parser.literalNames[t]||this.parser.symbolicNames[t])+"<"+t+">";console.log(t+" ttype out of range: "+this.parser.literalNames),console.log(""+this.parser.getInputStream().getTokens())}return""+t},k.prototype.getLookaheadName=function(t){return this.getTokenName(t.LA(1))},k.prototype.dumpDeadEndConfigs=function(t){console.log("dead end configs: ");for(var e=t.getDeadEndConfigs(),n=0;n<e.length;n++){var r=e[n],i="no edges";if(r.state.transitions.length>0){var o=r.state.transitions[0];if(o instanceof AtomTransition)i="Atom "+this.getTokenName(o.label);else if(o instanceof S){i=(o instanceof O?"~":"")+"Set "+o.set}}console.error(r.toString(this.parser,!0)+":"+i)}},k.prototype.noViableAlt=function(t,e,n,r){return new b(this.parser,t,t.get(r),t.LT(1),n,e)},k.prototype.getUniqueAlt=function(t){for(var e=a.INVALID_ALT_NUMBER,n=0;n<t.items.length;n++){var r=t.items[n];if(e===a.INVALID_ALT_NUMBER)e=r.alt;else if(r.alt!==e)return a.INVALID_ALT_NUMBER}return e},k.prototype.addDFAEdge=function(t,e,n,r){if(this.debug&&console.log("EDGE "+e+" -> "+r+" upon "+this.getTokenName(n)),null===r)return null;if(r=this.addDFAState(t,r),null===e||n<-1||n>this.atn.maxTokenType)return r;if(null===e.edges&&(e.edges=[]),e.edges[n+1]=r,this.debug){var i=null===this.parser?null:this.parser.literalNames,o=null===this.parser?null:this.parser.symbolicNames;console.log("DFA=\n"+t.toString(i,o))}return r},k.prototype.addDFAState=function(t,e){if(e==_.ERROR)return e;var n=t.states.get(e);return null!==n?n:(e.stateNumber=t.states.length,e.configs.readOnly||(e.configs.optimizeConfigs(this),e.configs.setReadonly(!0)),t.states.add(e),this.debug&&console.log("adding new DFA state: "+e),e)},k.prototype.reportAttemptingFullContext=function(t,e,n,r,i){if(this.debug||this.retry_debug){var o=new x(r,i+1);console.log("reportAttemptingFullContext decision="+t.decision+":"+n+", input="+this.parser.getTokenStream().getText(o))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser,t,r,i,e,n)},k.prototype.reportContextSensitivity=function(t,e,n,r,i){if(this.debug||this.retry_debug){var o=new x(r,i+1);console.log("reportContextSensitivity decision="+t.decision+":"+n+", input="+this.parser.getTokenStream().getText(o))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser,t,r,i,e,n)},k.prototype.reportAmbiguity=function(t,e,n,r,i,o,s){if(this.debug||this.retry_debug){var a=new x(n,r+1);console.log("reportAmbiguity "+o+":"+s+", input="+this.parser.getTokenStream().getText(a))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser,t,n,r,i,o,s)},e.ParserATNSimulator=k},function(t,e,n){e.DFA=n(45).DFA,e.DFASerializer=n(19).DFASerializer,e.LexerDFASerializer=n(19).LexerDFASerializer,e.PredPrediction=n(13).PredPrediction},function(t,e,n){var r=n(1).Set,i=n(13).DFAState,o=n(4).StarLoopEntryState,s=n(11).ATNConfigSet,a=n(19).DFASerializer,u=n(19).LexerDFASerializer;function c(t,e){if(void 0===e&&(e=0),this.atnStartState=t,this.decision=e,this._states=new r,this.s0=null,this.precedenceDfa=!1,t instanceof o&&t.isPrecedenceDecision){this.precedenceDfa=!0;var n=new i(null,new s);n.edges=[],n.isAcceptState=!1,n.requiresFullContext=!1,this.s0=n}return this}c.prototype.getPrecedenceStartState=function(t){if(!this.precedenceDfa)throw"Only precedence DFAs may contain a precedence start state.";return t<0||t>=this.s0.edges.length?null:this.s0.edges[t]||null},c.prototype.setPrecedenceStartState=function(t,e){if(!this.precedenceDfa)throw"Only precedence DFAs may contain a precedence start state.";t<0||(this.s0.edges[t]=e)},c.prototype.setPrecedenceDfa=function(t){if(this.precedenceDfa!==t){if(this._states=new DFAStatesSet,t){var e=new i(null,new s);e.edges=[],e.isAcceptState=!1,e.requiresFullContext=!1,this.s0=e}else this.s0=null;this.precedenceDfa=t}},Object.defineProperty(c.prototype,"states",{get:function(){return this._states}}),c.prototype.sortedStates=function(){return this._states.values().sort((function(t,e){return t.stateNumber-e.stateNumber}))},c.prototype.toString=function(t,e){return t=t||null,e=e||null,null===this.s0?"":new a(this,t,e).toString()},c.prototype.toLexerString=function(){return null===this.s0?"":new u(this).toString()},e.DFA=c},function(t,e,n){var r=n(5);e.Trees=n(24).Trees,e.RuleNode=r.RuleNode,e.ParseTreeListener=r.ParseTreeListener,e.ParseTreeVisitor=r.ParseTreeVisitor,e.ParseTreeWalker=r.ParseTreeWalker},function(t,e,n){e.RecognitionException=n(6).RecognitionException,e.NoViableAltException=n(6).NoViableAltException,e.LexerNoViableAltException=n(6).LexerNoViableAltException,e.InputMismatchException=n(6).InputMismatchException,e.FailedPredicateException=n(6).FailedPredicateException,e.DiagnosticErrorListener=n(48).DiagnosticErrorListener,e.BailErrorStrategy=n(33).BailErrorStrategy,e.ErrorListener=n(18).ErrorListener},function(t,e,n){var r=n(1).BitSet,i=n(18).ErrorListener,o=n(3).Interval;function s(t){return i.call(this),t=t||!0,this.exactOnly=t,this}s.prototype=Object.create(i.prototype),s.prototype.constructor=s,s.prototype.reportAmbiguity=function(t,e,n,r,i,s,a){if(!this.exactOnly||i){var u="reportAmbiguity d="+this.getDecisionDescription(t,e)+": ambigAlts="+this.getConflictingAlts(s,a)+", input='"+t.getTokenStream().getText(new o(n,r))+"'";t.notifyErrorListeners(u)}},s.prototype.reportAttemptingFullContext=function(t,e,n,r,i,s){var a="reportAttemptingFullContext d="+this.getDecisionDescription(t,e)+", input='"+t.getTokenStream().getText(new o(n,r))+"'";t.notifyErrorListeners(a)},s.prototype.reportContextSensitivity=function(t,e,n,r,i,s){var a="reportContextSensitivity d="+this.getDecisionDescription(t,e)+", input='"+t.getTokenStream().getText(new o(n,r))+"'";t.notifyErrorListeners(a)},s.prototype.getDecisionDescription=function(t,e){var n=e.decision,r=e.atnStartState.ruleIndex,i=t.ruleNames;if(r<0||r>=i.length)return""+n;var o=i[r]||null;return null===o||0===o.length?""+n:n+" ("+o+")"},s.prototype.getConflictingAlts=function(t,e){if(null!==t)return t;for(var n=new r,i=0;i<e.items.length;i++)n.add(e.items[i].alt);return"{"+n.values().join(", ")+"}"},e.DiagnosticErrorListener=s},function(t,e,n){var r=n(21).InputStream,i="undefined"==typeof window&&"undefined"==typeof importScripts?n(34):null,o={fromString:function(t){return new r(t,!0)},fromBlob:function(t,e,n,i){var o=FileReader();o.onload=function(t){var e=new r(t.target.result,!0);n(e)},o.onerror=i,o.readAsText(t,e)},fromBuffer:function(t,e){return new r(t.toString(e),!0)},fromPath:function(t,e,n){i.readFile(t,e,(function(t,e){var i=null;null!==e&&(i=new r(e,!0)),n(t,i)}))},fromPathSync:function(t,e){var n=i.readFileSync(t,e);return new r(n,!0)}};e.CharStreams=o},function(t,e,n){var r=n(21).InputStream,i="undefined"==typeof window&&"undefined"==typeof importScripts?n(34):null;function o(t,e){var n=i.readFileSync(t,"utf8");return r.call(this,n,e),this.fileName=t,this}o.prototype=Object.create(r.prototype),o.prototype.constructor=o,e.FileStream=o},function(t,e,n){var r=n(2).Token,i=n(52).BufferedTokenStream;function o(t,e){return i.call(this,t),this.channel=void 0===e?r.DEFAULT_CHANNEL:e,this}o.prototype=Object.create(i.prototype),o.prototype.constructor=o,o.prototype.adjustSeekIndex=function(t){return this.nextTokenOnChannel(t,this.channel)},o.prototype.LB=function(t){if(0===t||this.index-t<0)return null;for(var e=this.index,n=1;n<=t;)e=this.previousTokenOnChannel(e-1,this.channel),n+=1;return e<0?null:this.tokens[e]},o.prototype.LT=function(t){if(this.lazyInit(),0===t)return null;if(t<0)return this.LB(-t);for(var e=this.index,n=1;n<t;)this.sync(e+1)&&(e=this.nextTokenOnChannel(e+1,this.channel)),n+=1;return this.tokens[e]},o.prototype.getNumberOfOnChannelTokens=function(){var t=0;this.fill();for(var e=0;e<this.tokens.length;e++){var n=this.tokens[e];if(n.channel===this.channel&&(t+=1),n.type===r.EOF)break}return t},e.CommonTokenStream=o},function(t,e,n){var r=n(2).Token,i=n(17).Lexer,o=n(3).Interval;function s(){return this}function a(t){return s.call(this),this.tokenSource=t,this.tokens=[],this.index=-1,this.fetchedEOF=!1,this}a.prototype=Object.create(s.prototype),a.prototype.constructor=a,a.prototype.mark=function(){return 0},a.prototype.release=function(t){},a.prototype.reset=function(){this.seek(0)},a.prototype.seek=function(t){this.lazyInit(),this.index=this.adjustSeekIndex(t)},a.prototype.get=function(t){return this.lazyInit(),this.tokens[t]},a.prototype.consume=function(){if(!(this.index>=0&&(this.fetchedEOF?this.index<this.tokens.length-1:this.index<this.tokens.length))&&this.LA(1)===r.EOF)throw"cannot consume EOF";this.sync(this.index+1)&&(this.index=this.adjustSeekIndex(this.index+1))},a.prototype.sync=function(t){var e=t-this.tokens.length+1;return!(e>0)||this.fetch(e)>=e},a.prototype.fetch=function(t){if(this.fetchedEOF)return 0;for(var e=0;e<t;e++){var n=this.tokenSource.nextToken();if(n.tokenIndex=this.tokens.length,this.tokens.push(n),n.type===r.EOF)return this.fetchedEOF=!0,e+1}return t},a.prototype.getTokens=function(t,e,n){if(void 0===n&&(n=null),t<0||e<0)return null;this.lazyInit();var i=[];e>=this.tokens.length&&(e=this.tokens.length-1);for(var o=t;o<e;o++){var s=this.tokens[o];if(s.type===r.EOF)break;(null===n||n.contains(s.type))&&i.push(s)}return i},a.prototype.LA=function(t){return this.LT(t).type},a.prototype.LB=function(t){return this.index-t<0?null:this.tokens[this.index-t]},a.prototype.LT=function(t){if(this.lazyInit(),0===t)return null;if(t<0)return this.LB(-t);var e=this.index+t-1;return this.sync(e),e>=this.tokens.length?this.tokens[this.tokens.length-1]:this.tokens[e]},a.prototype.adjustSeekIndex=function(t){return t},a.prototype.lazyInit=function(){-1===this.index&&this.setup()},a.prototype.setup=function(){this.sync(0),this.index=this.adjustSeekIndex(0)},a.prototype.setTokenSource=function(t){this.tokenSource=t,this.tokens=[],this.index=-1,this.fetchedEOF=!1},a.prototype.nextTokenOnChannel=function(t,e){if(this.sync(t),t>=this.tokens.length)return-1;for(var n=this.tokens[t];n.channel!==this.channel;){if(n.type===r.EOF)return-1;t+=1,this.sync(t),n=this.tokens[t]}return t},a.prototype.previousTokenOnChannel=function(t,e){for(;t>=0&&this.tokens[t].channel!==e;)t-=1;return t},a.prototype.getHiddenTokensToRight=function(t,e){if(void 0===e&&(e=-1),this.lazyInit(),t<0||t>=this.tokens.length)throw t+" not in 0.."+this.tokens.length-1;var n=this.nextTokenOnChannel(t+1,i.DEFAULT_TOKEN_CHANNEL),r=t+1,o=-1===n?this.tokens.length-1:n;return this.filterForChannel(r,o,e)},a.prototype.getHiddenTokensToLeft=function(t,e){if(void 0===e&&(e=-1),this.lazyInit(),t<0||t>=this.tokens.length)throw t+" not in 0.."+this.tokens.length-1;var n=this.previousTokenOnChannel(t-1,i.DEFAULT_TOKEN_CHANNEL);if(n===t-1)return null;var r=n+1,o=t-1;return this.filterForChannel(r,o,e)},a.prototype.filterForChannel=function(t,e,n){for(var r=[],o=t;o<e+1;o++){var s=this.tokens[o];-1===n?s.channel!==i.DEFAULT_TOKEN_CHANNEL&&r.push(s):s.channel===n&&r.push(s)}return 0===r.length?null:r},a.prototype.getSourceName=function(){return this.tokenSource.getSourceName()},a.prototype.getText=function(t){this.lazyInit(),this.fill(),null==t&&(t=new o(0,this.tokens.length-1));var e=t.start;e instanceof r&&(e=e.tokenIndex);var n=t.stop;if(n instanceof r&&(n=n.tokenIndex),null===e||null===n||e<0||n<0)return"";n>=this.tokens.length&&(n=this.tokens.length-1);for(var i="",s=e;s<n+1;s++){var a=this.tokens[s];if(a.type===r.EOF)break;i+=a.text}return i},a.prototype.fill=function(){for(this.lazyInit();1e3===this.fetch(1e3););},e.BufferedTokenStream=a},function(t,e,n){var r=n(2).Token,i=n(5).ParseTreeListener,o=n(28).Recognizer,s=n(33).DefaultErrorStrategy,a=n(25).ATNDeserializer,u=n(26).ATNDeserializationOptions,c=n(5).TerminalNode,l=n(5).ErrorNode;function p(t){return i.call(this),this.parser=t,this}function h(t){return o.call(this),this._input=null,this._errHandler=new s,this._precedenceStack=[],this._precedenceStack.push(0),this._ctx=null,this.buildParseTrees=!0,this._tracer=null,this._parseListeners=null,this._syntaxErrors=0,this.setInputStream(t),this}p.prototype=Object.create(i.prototype),p.prototype.constructor=p,p.prototype.enterEveryRule=function(t){console.log("enter   "+this.parser.ruleNames[t.ruleIndex]+", LT(1)="+this.parser._input.LT(1).text)},p.prototype.visitTerminal=function(t){console.log("consume "+t.symbol+" rule "+this.parser.ruleNames[this.parser._ctx.ruleIndex])},p.prototype.exitEveryRule=function(t){console.log("exit    "+this.parser.ruleNames[t.ruleIndex]+", LT(1)="+this.parser._input.LT(1).text)},h.prototype=Object.create(o.prototype),h.prototype.contructor=h,h.bypassAltsAtnCache={},h.prototype.reset=function(){null!==this._input&&this._input.seek(0),this._errHandler.reset(this),this._ctx=null,this._syntaxErrors=0,this.setTrace(!1),this._precedenceStack=[],this._precedenceStack.push(0),null!==this._interp&&this._interp.reset()},h.prototype.match=function(t){var e=this.getCurrentToken();return e.type===t?(this._errHandler.reportMatch(this),this.consume()):(e=this._errHandler.recoverInline(this),this.buildParseTrees&&-1===e.tokenIndex&&this._ctx.addErrorNode(e)),e},h.prototype.matchWildcard=function(){var t=this.getCurrentToken();return t.type>0?(this._errHandler.reportMatch(this),this.consume()):(t=this._errHandler.recoverInline(this),this._buildParseTrees&&-1===t.tokenIndex&&this._ctx.addErrorNode(t)),t},h.prototype.getParseListeners=function(){return this._parseListeners||[]},h.prototype.addParseListener=function(t){if(null===t)throw"listener";null===this._parseListeners&&(this._parseListeners=[]),this._parseListeners.push(t)},h.prototype.removeParseListener=function(t){if(null!==this._parseListeners){var e=this._parseListeners.indexOf(t);e>=0&&this._parseListeners.splice(e,1),0===this._parseListeners.length&&(this._parseListeners=null)}},h.prototype.removeParseListeners=function(){this._parseListeners=null},h.prototype.triggerEnterRuleEvent=function(){if(null!==this._parseListeners){var t=this._ctx;this._parseListeners.map((function(e){e.enterEveryRule(t),t.enterRule(e)}))}},h.prototype.triggerExitRuleEvent=function(){if(null!==this._parseListeners){var t=this._ctx;this._parseListeners.slice(0).reverse().map((function(e){t.exitRule(e),e.exitEveryRule(t)}))}},h.prototype.getTokenFactory=function(){return this._input.tokenSource._factory},h.prototype.setTokenFactory=function(t){this._input.tokenSource._factory=t},h.prototype.getATNWithBypassAlts=function(){var t=this.getSerializedATN();if(null===t)throw"The current parser does not support an ATN with bypass alternatives.";var e=this.bypassAltsAtnCache[t];if(null===e){var n=new u;n.generateRuleBypassTransitions=!0,e=new a(n).deserialize(t),this.bypassAltsAtnCache[t]=e}return e};var f=n(17).Lexer;h.prototype.compileParseTreePattern=function(t,e,n){if(null===(n=n||null)&&null!==this.getTokenStream()){var r=this.getTokenStream().tokenSource;r instanceof f&&(n=r)}if(null===n)throw"Parser can't discover a lexer to use";return new ParseTreePatternMatcher(n,this).compile(t,e)},h.prototype.getInputStream=function(){return this.getTokenStream()},h.prototype.setInputStream=function(t){this.setTokenStream(t)},h.prototype.getTokenStream=function(){return this._input},h.prototype.setTokenStream=function(t){this._input=null,this.reset(),this._input=t},h.prototype.getCurrentToken=function(){return this._input.LT(1)},h.prototype.notifyErrorListeners=function(t,e,n){n=n||null,null===(e=e||null)&&(e=this.getCurrentToken()),this._syntaxErrors+=1;var r=e.line,i=e.column;this.getErrorListenerDispatch().syntaxError(this,e,r,i,t,n)},h.prototype.consume=function(){var t=this.getCurrentToken();t.type!==r.EOF&&this.getInputStream().consume();var e,n=null!==this._parseListeners&&this._parseListeners.length>0;(this.buildParseTrees||n)&&((e=this._errHandler.inErrorRecoveryMode(this)?this._ctx.addErrorNode(t):this._ctx.addTokenNode(t)).invokingState=this.state,n&&this._parseListeners.map((function(t){e instanceof l||void 0!==e.isErrorNode&&e.isErrorNode()?t.visitErrorNode(e):e instanceof c&&t.visitTerminal(e)})));return t},h.prototype.addContextToParseTree=function(){null!==this._ctx.parentCtx&&this._ctx.parentCtx.addChild(this._ctx)},h.prototype.enterRule=function(t,e,n){this.state=e,this._ctx=t,this._ctx.start=this._input.LT(1),this.buildParseTrees&&this.addContextToParseTree(),null!==this._parseListeners&&this.triggerEnterRuleEvent()},h.prototype.exitRule=function(){this._ctx.stop=this._input.LT(-1),null!==this._parseListeners&&this.triggerExitRuleEvent(),this.state=this._ctx.invokingState,this._ctx=this._ctx.parentCtx},h.prototype.enterOuterAlt=function(t,e){t.setAltNumber(e),this.buildParseTrees&&this._ctx!==t&&null!==this._ctx.parentCtx&&(this._ctx.parentCtx.removeLastChild(),this._ctx.parentCtx.addChild(t)),this._ctx=t},h.prototype.getPrecedence=function(){return 0===this._precedenceStack.length?-1:this._precedenceStack[this._precedenceStack.length-1]},h.prototype.enterRecursionRule=function(t,e,n,r){this.state=e,this._precedenceStack.push(r),this._ctx=t,this._ctx.start=this._input.LT(1),null!==this._parseListeners&&this.triggerEnterRuleEvent()},h.prototype.pushNewRecursionContext=function(t,e,n){var r=this._ctx;r.parentCtx=t,r.invokingState=e,r.stop=this._input.LT(-1),this._ctx=t,this._ctx.start=r.start,this.buildParseTrees&&this._ctx.addChild(r),null!==this._parseListeners&&this.triggerEnterRuleEvent()},h.prototype.unrollRecursionContexts=function(t){this._precedenceStack.pop(),this._ctx.stop=this._input.LT(-1);var e=this._ctx;if(null!==this._parseListeners)for(;this._ctx!==t;)this.triggerExitRuleEvent(),this._ctx=this._ctx.parentCtx;else this._ctx=t;e.parentCtx=t,this.buildParseTrees&&null!==t&&t.addChild(e)},h.prototype.getInvokingContext=function(t){for(var e=this._ctx;null!==e;){if(e.ruleIndex===t)return e;e=e.parentCtx}return null},h.prototype.precpred=function(t,e){return e>=this._precedenceStack[this._precedenceStack.length-1]},h.prototype.inContext=function(t){return!1},h.prototype.isExpectedToken=function(t){var e=this._interp.atn,n=this._ctx,i=e.states[this.state],o=e.nextTokens(i);if(o.contains(t))return!0;if(!o.contains(r.EPSILON))return!1;for(;null!==n&&n.invokingState>=0&&o.contains(r.EPSILON);){var s=e.states[n.invokingState].transitions[0];if((o=e.nextTokens(s.followState)).contains(t))return!0;n=n.parentCtx}return!(!o.contains(r.EPSILON)||t!==r.EOF)},h.prototype.getExpectedTokens=function(){return this._interp.atn.getExpectedTokens(this.state,this._ctx)},h.prototype.getExpectedTokensWithinCurrentRule=function(){var t=this._interp.atn,e=t.states[this.state];return t.nextTokens(e)},h.prototype.getRuleIndex=function(t){var e=this.getRuleIndexMap()[t];return null!==e?e:-1},h.prototype.getRuleInvocationStack=function(t){null===(t=t||null)&&(t=this._ctx);for(var e=[];null!==t;){var n=t.ruleIndex;n<0?e.push("n/a"):e.push(this.ruleNames[n]),t=t.parentCtx}return e},h.prototype.getDFAStrings=function(){return this._interp.decisionToDFA.toString()},h.prototype.dumpDFA=function(){for(var t=!1,e=0;e<this._interp.decisionToDFA.length;e++){var n=this._interp.decisionToDFA[e];n.states.length>0&&(t&&console.log(),this.printer.println("Decision "+n.decision+":"),this.printer.print(n.toString(this.literalNames,this.symbolicNames)),t=!0)}},h.prototype.getSourceName=function(){return this._input.sourceName},h.prototype.setTrace=function(t){t?(null!==this._tracer&&this.removeParseListener(this._tracer),this._tracer=new p(this),this.addParseListener(this._tracer)):(this.removeParseListener(this._tracer),this._tracer=null)},e.Parser=h},function(t,e,n){var r=n(14),i=["悋Ꜫ脳맭䅼㯧瞆奤","T\b\t\t","\t\t\t\t","\b\t\b\t\t\t\n\t\n\v\t\v","\f\t\f\r\t\r\t","","\b\b\t","\t\n\n\n\n1\n\n\f\n\n4\v\n\n","6\n\n\v\v\v\v\f","\f\f\f\f@\n\f\f\f\fC\v\f\f\f","\r\rH\n\r\r\r\rI\r\r","P\n\fS\v","\t\v\r\b","\t\n\v\f\r","\b3;2;$$\v",'\f""C\\2;C\\c|Y',"","\t\v","\r","","","","","!\t#","\v%\r'",")+","57;","GM","+","  ",'!"?"\b#$=',"$\n%&/&\f","'(*()*","}*+,~",",-62.2\t","/1\t0/14","202336","425-","5.678t","89g9:h:",";A$<=^=@$",">@\n?<?>","@CA?AB","BDCA","DE$EFH\t","GFHIIG","IJJKKL\b","\rLMQ\t","NP\tONPS","QOQRR","SQ\t25?AIQ\b",""].join(""),o=(new r.atn.ATNDeserializer).deserialize(i),s=o.decisionToState.map((function(t,e){return new r.dfa.DFA(t,e)}));function a(t){return r.Lexer.call(this,t),this._interp=new r.atn.LexerATNSimulator(this,o,s,new r.PredictionContextCache),this}a.prototype=Object.create(r.Lexer.prototype),a.prototype.constructor=a,Object.defineProperty(a.prototype,"atn",{get:function(){return o}}),a.EOF=r.Token.EOF,a.CloseArguments=1,a.CloseParenthesis=2,a.DefineOperator=3,a.DefinitionTerminator=4,a.DifferenceOperator=5,a.OpenArguments=6,a.OpenParenthesis=7,a.OrOperator=8,a.PositiveInteger=9,a.ReferenceCall=10,a.String=11,a.WhiteSpace=12,a.WordName=13,a.prototype.channelNames=["DEFAULT_TOKEN_CHANNEL","HIDDEN"],a.prototype.modeNames=["DEFAULT_MODE"],a.prototype.literalNames=[null,"')'","'}'","'='","';'","'-'","'('","'{'","'|'",null,"'ref'"],a.prototype.symbolicNames=[null,"CloseArguments","CloseParenthesis","DefineOperator","DefinitionTerminator","DifferenceOperator","OpenArguments","OpenParenthesis","OrOperator","PositiveInteger","ReferenceCall","String","WhiteSpace","WordName"],a.prototype.ruleNames=["CloseArguments","CloseParenthesis","DefineOperator","DefinitionTerminator","DifferenceOperator","OpenArguments","OpenParenthesis","OrOperator","PositiveInteger","ReferenceCall","String","WhiteSpace","WordName"],a.prototype.grammarFileName="DekuRule.g4",e.DekuRuleLexer=a},function(t,e,n){var r=n(14),i=n(35).DekuRuleListener,o=["悋Ꜫ脳맭䅼㯧瞆奤","W\t\t\t","\t\t\t","\b\t\b\t\t\t\n\t\n\v\t\v","\n\f\v","!\n\r",'"',"-\n","2\n","","?\n\b","\b\b\b\b\b\t\tH\n\t\r\t\t","I\n\n\n\n\nP\n\n\v\v","\v\v\v\v\f","\b\n\fX"," ",",\b1\n3","\f>@","GO","Q\v","","","","\t\v","\n! ",'!"" ','"##$$%',"\t%&\v&'","(\t())*","*-+-,'",",+-",".2\r/202","\b1.1/10","2\t34","4556\b6\v","78\t89\n9:",":?;?<?","\r=?\b>7>;","><>=","?\r@A\fAB\b","BCCD\vDE","EFH\fGF","HIIG","IJJKP","LP\nMP\fNP","\tOKOLOM","ONP","QRRSST","\nTUU\t",'",1>IO'].join(""),s=(new r.atn.ATNDeserializer).deserialize(o),a=s.decisionToState.map((function(t,e){return new r.dfa.DFA(t,e)})),u=new r.PredictionContextCache,c=[null,"')'","'}'","'='","';'","'-'","'('","'{'","'|'",null,"'ref'"],l=[null,"CloseArguments","CloseParenthesis","DefineOperator","DefinitionTerminator","DifferenceOperator","OpenArguments","OpenParenthesis","OrOperator","PositiveInteger","ReferenceCall","String","WhiteSpace","WordName"],p=["root","choiceWord","differenceLhs","differenceRhs","differenceWord","elementWord","referenceWord","sequenceWord","word","wordDefinition"];function h(t){return r.Parser.call(this,t),this._interp=new r.atn.ParserATNSimulator(this,s,a,u),this.ruleNames=p,this.literalNames=c,this.symbolicNames=l,this}function f(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_root,this}function _(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_choiceWord,this}function d(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_differenceLhs,this}function y(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_differenceRhs,this}function g(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_differenceWord,this}function v(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_elementWord,this}function m(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_referenceWord,this}function x(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_sequenceWord,this}function T(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_word,this}function E(t,e,n){return void 0===e&&(e=null),null==n&&(n=-1),r.ParserRuleContext.call(this,e,n),this.parser=t,this.ruleIndex=h.RULE_wordDefinition,this}h.prototype=Object.create(r.Parser.prototype),h.prototype.constructor=h,Object.defineProperty(h.prototype,"atn",{get:function(){return s}}),h.EOF=r.Token.EOF,h.CloseArguments=1,h.CloseParenthesis=2,h.DefineOperator=3,h.DefinitionTerminator=4,h.DifferenceOperator=5,h.OpenArguments=6,h.OpenParenthesis=7,h.OrOperator=8,h.PositiveInteger=9,h.ReferenceCall=10,h.String=11,h.WhiteSpace=12,h.WordName=13,h.RULE_root=0,h.RULE_choiceWord=1,h.RULE_differenceLhs=2,h.RULE_differenceRhs=3,h.RULE_differenceWord=4,h.RULE_elementWord=5,h.RULE_referenceWord=6,h.RULE_sequenceWord=7,h.RULE_word=8,h.RULE_wordDefinition=9,f.prototype=Object.create(r.ParserRuleContext.prototype),f.prototype.constructor=f,f.prototype.wordDefinition=function(t){return void 0===t&&(t=null),null===t?this.getTypedRuleContexts(E):this.getTypedRuleContext(E,t)},f.prototype.enterRule=function(t){t instanceof i&&t.enterRoot(this)},f.prototype.exitRule=function(t){t instanceof i&&t.exitRoot(this)},h.RootContext=f,h.prototype.root=function(){var t=new f(this,this._ctx,this.state);this.enterRule(t,0,h.RULE_root);var e=0;try{for(this.enterOuterAlt(t,1),this.state=23,this._errHandler.sync(this),e=this._input.LA(1);e===h.WordName;)this.state=20,this.wordDefinition(),this.state=25,this._errHandler.sync(this),e=this._input.LA(1)}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},_.prototype=Object.create(r.ParserRuleContext.prototype),_.prototype.constructor=_,_.prototype.sequenceWord=function(t){return void 0===t&&(t=null),null===t?this.getTypedRuleContexts(x):this.getTypedRuleContext(x,t)},_.prototype.PositiveInteger=function(t){return void 0===t&&(t=null),null===t?this.getTokens(h.PositiveInteger):this.getToken(h.PositiveInteger,t)},_.prototype.OrOperator=function(t){return void 0===t&&(t=null),null===t?this.getTokens(h.OrOperator):this.getToken(h.OrOperator,t)},_.prototype.enterRule=function(t){t instanceof i&&t.enterChoiceWord(this)},_.prototype.exitRule=function(t){t instanceof i&&t.exitChoiceWord(this)},h.ChoiceWordContext=_,h.prototype.choiceWord=function(){var t=new _(this,this._ctx,this.state);this.enterRule(t,2,h.RULE_choiceWord);try{this.enterOuterAlt(t,1),this.state=30,this._errHandler.sync(this);var e=1;do{switch(e){case 1:this.state=26,this.sequenceWord(),this.state=27,this.match(h.PositiveInteger),this.state=28,this.match(h.OrOperator);break;default:throw new r.error.NoViableAltException(this)}this.state=32,this._errHandler.sync(this),e=this._interp.adaptivePredict(this._input,1,this._ctx)}while(2!=e&&e!=r.atn.ATN.INVALID_ALT_NUMBER);this.state=34,this.sequenceWord(),this.state=35,this.match(h.PositiveInteger)}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},d.prototype=Object.create(r.ParserRuleContext.prototype),d.prototype.constructor=d,d.prototype.OpenParenthesis=function(){return this.getToken(h.OpenParenthesis,0)},d.prototype.choiceWord=function(){return this.getTypedRuleContext(_,0)},d.prototype.CloseParenthesis=function(){return this.getToken(h.CloseParenthesis,0)},d.prototype.WordName=function(){return this.getToken(h.WordName,0)},d.prototype.enterRule=function(t){t instanceof i&&t.enterDifferenceLhs(this)},d.prototype.exitRule=function(t){t instanceof i&&t.exitDifferenceLhs(this)},h.DifferenceLhsContext=d,h.prototype.differenceLhs=function(){var t=new d(this,this._ctx,this.state);this.enterRule(t,4,h.RULE_differenceLhs);try{switch(this.state=42,this._errHandler.sync(this),this._input.LA(1)){case h.OpenParenthesis:this.enterOuterAlt(t,1),this.state=37,this.match(h.OpenParenthesis),this.state=38,this.choiceWord(),this.state=39,this.match(h.CloseParenthesis);break;case h.WordName:this.enterOuterAlt(t,2),this.state=41,this.match(h.WordName);break;default:throw new r.error.NoViableAltException(this)}}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},y.prototype=Object.create(r.ParserRuleContext.prototype),y.prototype.constructor=y,y.prototype.String=function(){return this.getToken(h.String,0)},y.prototype.WordName=function(){return this.getToken(h.WordName,0)},y.prototype.referenceWord=function(){return this.getTypedRuleContext(m,0)},y.prototype.enterRule=function(t){t instanceof i&&t.enterDifferenceRhs(this)},y.prototype.exitRule=function(t){t instanceof i&&t.exitDifferenceRhs(this)},h.DifferenceRhsContext=y,h.prototype.differenceRhs=function(){var t=new y(this,this._ctx,this.state);this.enterRule(t,6,h.RULE_differenceRhs);try{switch(this.state=47,this._errHandler.sync(this),this._input.LA(1)){case h.String:this.enterOuterAlt(t,1),this.state=44,this.match(h.String);break;case h.WordName:this.enterOuterAlt(t,2),this.state=45,this.match(h.WordName);break;case h.ReferenceCall:this.enterOuterAlt(t,3),this.state=46,this.referenceWord();break;default:throw new r.error.NoViableAltException(this)}}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},g.prototype=Object.create(r.ParserRuleContext.prototype),g.prototype.constructor=g,g.prototype.differenceLhs=function(){return this.getTypedRuleContext(d,0)},g.prototype.DifferenceOperator=function(){return this.getToken(h.DifferenceOperator,0)},g.prototype.differenceRhs=function(){return this.getTypedRuleContext(y,0)},g.prototype.enterRule=function(t){t instanceof i&&t.enterDifferenceWord(this)},g.prototype.exitRule=function(t){t instanceof i&&t.exitDifferenceWord(this)},h.DifferenceWordContext=g,h.prototype.differenceWord=function(){var t=new g(this,this._ctx,this.state);this.enterRule(t,8,h.RULE_differenceWord);try{this.enterOuterAlt(t,1),this.state=49,this.differenceLhs(),this.state=50,this.match(h.DifferenceOperator),this.state=51,this.differenceRhs()}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},v.prototype=Object.create(r.ParserRuleContext.prototype),v.prototype.constructor=v,v.prototype.OpenParenthesis=function(){return this.getToken(h.OpenParenthesis,0)},v.prototype.word=function(){return this.getTypedRuleContext(T,0)},v.prototype.CloseParenthesis=function(){return this.getToken(h.CloseParenthesis,0)},v.prototype.WordName=function(){return this.getToken(h.WordName,0)},v.prototype.String=function(){return this.getToken(h.String,0)},v.prototype.referenceWord=function(){return this.getTypedRuleContext(m,0)},v.prototype.enterRule=function(t){t instanceof i&&t.enterElementWord(this)},v.prototype.exitRule=function(t){t instanceof i&&t.exitElementWord(this)},h.ElementWordContext=v,h.prototype.elementWord=function(){var t=new v(this,this._ctx,this.state);this.enterRule(t,10,h.RULE_elementWord);try{switch(this.state=60,this._errHandler.sync(this),this._input.LA(1)){case h.OpenParenthesis:this.enterOuterAlt(t,1),this.state=53,this.match(h.OpenParenthesis),this.state=54,this.word(),this.state=55,this.match(h.CloseParenthesis);break;case h.WordName:this.enterOuterAlt(t,2),this.state=57,this.match(h.WordName);break;case h.String:this.enterOuterAlt(t,3),this.state=58,this.match(h.String);break;case h.ReferenceCall:this.enterOuterAlt(t,4),this.state=59,this.referenceWord();break;default:throw new r.error.NoViableAltException(this)}}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},m.prototype=Object.create(r.ParserRuleContext.prototype),m.prototype.constructor=m,m.prototype.ReferenceCall=function(){return this.getToken(h.ReferenceCall,0)},m.prototype.OpenArguments=function(){return this.getToken(h.OpenArguments,0)},m.prototype.WordName=function(){return this.getToken(h.WordName,0)},m.prototype.PositiveInteger=function(){return this.getToken(h.PositiveInteger,0)},m.prototype.CloseArguments=function(){return this.getToken(h.CloseArguments,0)},m.prototype.enterRule=function(t){t instanceof i&&t.enterReferenceWord(this)},m.prototype.exitRule=function(t){t instanceof i&&t.exitReferenceWord(this)},h.ReferenceWordContext=m,h.prototype.referenceWord=function(){var t=new m(this,this._ctx,this.state);this.enterRule(t,12,h.RULE_referenceWord);try{this.enterOuterAlt(t,1),this.state=62,this.match(h.ReferenceCall),this.state=63,this.match(h.OpenArguments),this.state=64,this.match(h.WordName),this.state=65,this.match(h.PositiveInteger),this.state=66,this.match(h.CloseArguments)}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},x.prototype=Object.create(r.ParserRuleContext.prototype),x.prototype.constructor=x,x.prototype.elementWord=function(t){return void 0===t&&(t=null),null===t?this.getTypedRuleContexts(v):this.getTypedRuleContext(v,t)},x.prototype.enterRule=function(t){t instanceof i&&t.enterSequenceWord(this)},x.prototype.exitRule=function(t){t instanceof i&&t.exitSequenceWord(this)},h.SequenceWordContext=x,h.prototype.sequenceWord=function(){var t=new x(this,this._ctx,this.state);this.enterRule(t,14,h.RULE_sequenceWord);var e=0;try{this.enterOuterAlt(t,1),this.state=69,this._errHandler.sync(this),e=this._input.LA(1);do{this.state=68,this.elementWord(),this.state=71,this._errHandler.sync(this),e=this._input.LA(1)}while(0==(-32&e)&&0!=(1<<e&(1<<h.OpenParenthesis|1<<h.ReferenceCall|1<<h.String|1<<h.WordName)))}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},T.prototype=Object.create(r.ParserRuleContext.prototype),T.prototype.constructor=T,T.prototype.choiceWord=function(){return this.getTypedRuleContext(_,0)},T.prototype.differenceWord=function(){return this.getTypedRuleContext(g,0)},T.prototype.elementWord=function(){return this.getTypedRuleContext(v,0)},T.prototype.sequenceWord=function(){return this.getTypedRuleContext(x,0)},T.prototype.enterRule=function(t){t instanceof i&&t.enterWord(this)},T.prototype.exitRule=function(t){t instanceof i&&t.exitWord(this)},h.WordContext=T,h.prototype.word=function(){var t=new T(this,this._ctx,this.state);this.enterRule(t,16,h.RULE_word);try{switch(this.state=77,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,6,this._ctx)){case 1:this.enterOuterAlt(t,1),this.state=73,this.choiceWord();break;case 2:this.enterOuterAlt(t,2),this.state=74,this.differenceWord();break;case 3:this.enterOuterAlt(t,3),this.state=75,this.elementWord();break;case 4:this.enterOuterAlt(t,4),this.state=76,this.sequenceWord()}}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},E.prototype=Object.create(r.ParserRuleContext.prototype),E.prototype.constructor=E,E.prototype.WordName=function(){return this.getToken(h.WordName,0)},E.prototype.DefineOperator=function(){return this.getToken(h.DefineOperator,0)},E.prototype.word=function(){return this.getTypedRuleContext(T,0)},E.prototype.DefinitionTerminator=function(){return this.getToken(h.DefinitionTerminator,0)},E.prototype.enterRule=function(t){t instanceof i&&t.enterWordDefinition(this)},E.prototype.exitRule=function(t){t instanceof i&&t.exitWordDefinition(this)},h.WordDefinitionContext=E,h.prototype.wordDefinition=function(){var t=new E(this,this._ctx,this.state);this.enterRule(t,18,h.RULE_wordDefinition);try{this.enterOuterAlt(t,1),this.state=79,this.match(h.WordName),this.state=80,this.match(h.DefineOperator),this.state=81,this.word(),this.state=82,this.match(h.DefinitionTerminator)}catch(e){if(!(e instanceof r.error.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t},e.DekuRuleParser=h},function(t,e,n){"use strict";n.r(e),n.d(e,"MAX_DEKUGA_LENGTH",(function(){return i})),n.d(e,"append_new_deku",(function(){return o})),n.d(e,"on_click_kekure_deku",(function(){return s})),n.d(e,"on_dom_content_loaded",(function(){return a}));n(0),n(23);var r=n(36),i=20,o=function(t,e){if(t.childElementCount>=i)for(var n=19;n<t.childElementCount;n++)t.removeChild(t.children[n]);t.hasChildNodes()?t.insertBefore(e,t.firstChild):t.appendChild(e)},s=function(t){var e=document.createElement("li");e.textContent=Object(r.a)();var n=document.getElementById("dEkuga");window.requestAnimationFrame((function(t){return o(n,e)}))},a=function(t){document.getElementById("kekurE_dEku").addEventListener("click",s)};window.addEventListener("DOMContentLoaded",a)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,